/// <reference types="@types/ckeditor" />
import { Component, ViewChild } from '@angular/core';
import Swal from 'sweetalert2';
import * as CryptoJS from 'crypto-js';
import { Buffer } from 'buffer';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/common/http";
import * as i3 from "../validationchecklist.service";
import * as i4 from "../encrypy-decrpy.service";
import * as i5 from "../msgengine-lib.service";
import * as i6 from "../varlist.service";
import * as i7 from "@angular/common";
import * as i8 from "@angular/forms";
import * as i9 from "ngx-dropzone";
import * as i10 from "@ng-bootstrap/ng-bootstrap";
import * as i11 from "ckeditor4-angular";
import * as i12 from "../libtabs/libtabs.component";
import * as i13 from "../libutils/libutils.component";
import * as i14 from "../translate.pipe";
export class AddmsgengineComponent {
    constructor(route, router, httpClient, vldChkLst, encDec, commonserveice, varlist) {
        this.route = route;
        this.router = router;
        this.httpClient = httpClient;
        this.vldChkLst = vldChkLst;
        this.encDec = encDec;
        this.commonserveice = commonserveice;
        this.varlist = varlist;
        this.messaageslist = {
            "successMsg": "New Message Generated Successfully",
            "updatesuccessMsg": "Updated Successfully",
            "errorMsg": "Error in Message creation",
            "configtype": "Configuration Type",
            "formnames": "Please a Select Form Name",
            "smsTempId": "Please Enter smsTempId",
            "messageType": "Message Type",
            "eventType": " a Event ",
            "smsSubject": "Please Enter SMS Subject",
            "smscontent": "Please Enter SMS content",
            "intMailTemplate": "Template",
            "intDocumentType": "Document Type",
            "vchDocument": "Please Choose a Document",
            "vchLanguage": "Please Choose a Language",
            "emailId": "Please Enter email id key",
            "to": "Please select to",
            "mobileNo": "Please enter mobile no key",
            "gateWayDetails": "Configuration",
            "formtype": "Form Name"
        };
        this.jsonurl = [{
                "pagetitle": "Add Message Engine",
                "tabList": [
                    {
                        "tabName": "Add",
                        "tabUrl": "",
                        "tabClass": "active add d-none"
                    },
                    {
                        "tabName": "Edit",
                        "tabUrl": "",
                        "tabClass": "active edit d-none"
                    },
                    {
                        "tabName": "View",
                        "tabUrl": "../viewmessageengine"
                    },
                    {
                        "tabName": "Reminder",
                        "tabUrl": "../viewmessagereminder"
                    }
                ],
                "utils": [{
                        "utilName": "mandatory"
                    },
                    {
                        "utilName": "back"
                    }
                ],
            }];
        this.messageId = "";
        this.txtFormId = 0;
        this.configtype = 0;
        this.smsTempId = '';
        this.smsSubject = '';
        this.messageContent = '';
        this.messageType = 0;
        this.eventType = 0;
        this.formnames = 0;
        this.intMailTemplate = 0;
        this.fileType = 0;
        this.documentFile = '';
        this.selFormName = 0;
        this.vchLanguage = 0;
        this.langKey = 'en';
        this.mailsmstoApplicant = 0;
        this.mailsmstoAuthority = 0;
        this.emailId = '';
        this.mobileNo = '';
        this.gatewayconfigDetails = '';
        this.gateWayconfigtype = 0;
        this.fileeList = [];
        this.selformId = 0;
        this.ckeConfig = this.varlist.ckconfig;
        this.formenable = this.varlist.formEnable;
        this.dynamicForm = this.varlist.dynamicForm;
    }
    ngOnInit() {
        this.loadconfig();
        if (this.varlist.formEnable == true) {
            this.getForms();
        }
        else {
            this.txtFormId = this.varlist.formId;
        }
        this.getLanguage();
        this.getStaticFormKeys();
        //this.addChangeEventForLabel();
        this.sessiontoken = sessionStorage.getItem('ADMIN_SESSION');
        //  console.log(this.sessiontoken)
        let SeetionParsed;
        if (this.varlist.sessionEncrypted == true) {
            SeetionParsed = JSON.parse(CryptoJS.AES.decrypt(this.sessiontoken, this.varlist.apiHashingKey).toString(CryptoJS.enc.Utf8));
        }
        else {
            SeetionParsed = JSON.parse(this.sessiontoken);
        }
        this.userId = SeetionParsed.USER_ID;
        let encSchemeId = this.router.snapshot.paramMap.get('id');
        if (encSchemeId != "") {
            let schemeStr = this.encDec.decText(encSchemeId);
            let schemeArr = schemeStr.split(':');
            this.messageId = schemeArr[0];
            this.txtFormId = schemeArr[1];
            this.txtProcessName = schemeArr[2];
            this.formnames = this.txtFormId;
            if (this.messageId != '' || this.messageId != 0) {
                this.getMessageinfo();
                this.getFormKeys();
            }
        }
    }
    changedocType() {
        this.fileeList = [];
        this.documentFile = '';
        this.documentUrl = '';
    }
    loadconfig() {
        this.tablist = this.jsonurl[0].tabList;
        this.utillist = this.jsonurl[0].utils;
        if (this.messageId == "") {
            this.title = this.multilingual(this.jsonurl[0].pagetitle);
        }
        else {
            this.title = "Edit Message Engine";
        }
    }
    multilingual(test) {
        return test;
    }
    ;
    getForms() {
        let params = {};
        this.commonserveice.getForms(params).subscribe((resp) => {
            let respData = resp.RESPONSE_DATA;
            let respToken = resp.RESPONSE_TOKEN;
            let verifyToken = CryptoJS.HmacSHA256(respData, this.varlist.apiHashingKey).toString();
            if (respToken == verifyToken) {
                let res = Buffer.from(respData, 'base64');
                res = JSON.parse(res.toString());
                //console.log('res');
                if (res.status === 200) {
                    this.formNameslist = res.result;
                }
                else {
                    console.log(res.messages);
                }
            }
            else {
                Swal.fire({
                    icon: 'error',
                    text: this.commonserveice.langReplace(this.varlist.invalidResponse),
                });
            }
        });
    }
    //\\ ======================== // Temp Uplaoad On select // ======================== //\\
    onSelect(event) {
        if (!this.vldChkLst.selectDropdown(this.fileType, this.messaageslist.intDocumentType)) { }
        else {
            let newFile = new FormData();
            let filetype = event.addedFiles[0].name;
            let filesize = event.addedFiles[0].size;
            let splititems = filetype.split('.', 2);
            if ((this.fileType == 1) && !(splititems[1] == 'mp3' || splititems[1] == 'mpeg')) {
                Swal.fire({
                    icon: 'error',
                    text: this.commonserveice.langReplace("Only accept mp3 and mpeg file"),
                });
            }
            else if ((this.fileType == 1) && (filesize > 1024 * 1024 * 5)) {
                Swal.fire({
                    icon: 'error',
                    text: this.commonserveice.langReplace("Max allow file size 5 MB"),
                });
            }
            else if ((this.fileType == 2) && !(splititems[1] == 'mp4' || splititems[1] == 'wmv' || splititems[1] == 'webm')) {
                Swal.fire({
                    icon: 'error',
                    text: this.commonserveice.langReplace("Only mp4,wmv, webm file"),
                });
            }
            else if ((this.fileType == 2) && (filesize > 131072 * 10)) {
                Swal.fire({
                    icon: 'error',
                    text: this.commonserveice.langReplace("Max allow file size 10 MB"),
                });
            }
            else if ((this.fileType == 3) && !(splititems[1] == 'jpeg' || splititems[1] == 'jpg' || splititems[1] == 'png')) {
                Swal.fire({
                    icon: 'error',
                    text: this.commonserveice.langReplace("Only Upload .jpg, .jpeg, .png file"),
                });
            }
            else if ((this.fileType == 3) && (filesize > 131072)) {
                Swal.fire({
                    icon: 'error',
                    text: this.commonserveice.langReplace("Max allow file size 1 MB"),
                });
            }
            else {
                newFile.append('file', event.addedFiles[0]);
                newFile.append('fileType', splititems[1]);
                console.log(filesize);
                this.commonserveice.msguploadFile(newFile).subscribe((response) => {
                    let respData = response.RESPONSE_DATA;
                    let respToken = response.RESPONSE_TOKEN;
                    let verifyToken = CryptoJS.HmacSHA256(respData, this.varlist.apiHashingKey).toString();
                    if (respToken == verifyToken) {
                        let res = Buffer.from(respData, 'base64');
                        let responseResult = JSON.parse(res);
                        if (responseResult.status == 200) {
                            //  this.files_dropped.push(event.addedFiles);
                            let obj = {};
                            obj['fileName'] = responseResult.result.fileName;
                            obj['filePath'] = responseResult.result.filePath;
                            obj['fileType'] = responseResult.result.fileType;
                            this.fileeList.push(obj);
                            this.documentFile = responseResult.result.fileName;
                        }
                        else if (responseResult.status == 400) {
                            Swal.fire({
                                icon: 'error',
                                text: responseResult.message,
                            });
                        }
                        else {
                            this.commonserveice.directlogoutlib();
                        }
                    }
                    else {
                        //   this.loading = false;
                        Swal.fire({
                            icon: 'error',
                            text: this.commonserveice.langReplace(this.varlist.invalidResponse),
                        });
                    }
                }, (error) => {
                    this.commonserveice.directlogoutlib();
                });
            }
        }
        //console.log(event.addedFiles);
    }
    //\\ ======================== // Temp Uplaoad On select // ======================== //\\
    onRemove(event) {
        this.fileeList.splice(this.fileeList.indexOf(event), 1);
        // this.previewFile=false;
        //this.resetform()
    }
    //\\ ======================== // Get file Type // ======================== //\\
    getfiletypeicon(ftype) {
        let icon;
        if (ftype == 'pdf') {
            icon = 'bi-file-pdf text-danger';
        }
        else if (ftype == 'jpg' || ftype == 'jpeg' || ftype == 'png' || ftype == 'gif') {
            icon = 'bi-card-image';
        }
        else if (ftype == 'mp4' || ftype == 'mkv') {
            icon = 'bi-camera-video';
        }
        else if (ftype == 'mp3' || ftype == 'WAV') {
            icon = 'bi-file-earmark-music';
        }
        else if (ftype == 'doc' || ftype == 'docx') {
            icon = 'bi-filetype-doc text-primary';
        }
        else if (ftype == 'ppt' || ftype == 'pptx') {
            icon = 'bi-filetype-ppt text-danger';
        }
        else if (ftype == 'xls' || ftype == 'xlsx' || ftype == 'ods') {
            icon = 'bi-filetype-xls text-success';
        }
        else if (ftype == 'zip') {
            icon = 'bi-file-zip text-warning';
        }
        else {
            icon = 'bi-folder-fill text-warning';
        }
        return icon;
    }
    //\\ ======================== // Get file Type // ======================== //\\
    newGenerateMessage() {
        // this.messageContent = this.CkeditornewComponent.ckdesc;
        let configtypeVal = this.configtype;
        let smsTempIdVal = this.smsTempId;
        let messageTypeVal = this.messageType;
        let eventTypeVal = this.eventType;
        let smsSubjectVal = this.smsSubject;
        //console.log('smsSubjectVal');
        let messageContentVal = this.messageContent;
        let intMailTemplateVal = this.intMailTemplate;
        let intDocumentType = this.fileType;
        let vchDocument = this.documentFile;
        let vchLanguage = this.vchLanguage;
        if ((this.varlist.formEnable == true) && (this.varlist.dynamicForm == true) && (!this.vldChkLst.blankCheck(this.formnames, this.commonserveice.langReplace(this.messaageslist.formnames)))) { }
        else if (!this.vldChkLst.selectDropdown(configtypeVal, this.commonserveice.langReplace(this.messaageslist.configtype), 'configtype')) { }
        else if (!this.vldChkLst.selectDropdown(this.gateWayconfigtype, this.commonserveice.langReplace(this.messaageslist.gateWayDetails), 'gatewayConfigurationType')) { }
        else if (!this.vldChkLst.selectDropdown(this.messageType, this.commonserveice.langReplace(this.messaageslist.messageType), 'messageType')) { }
        else if (!this.vldChkLst.blankCheck(vchLanguage, this.commonserveice.langReplace(this.messaageslist.vchLanguage), 'vchLanguage')) { }
        else if ((configtypeVal == 2) && (!this.vldChkLst.blankCheck(this.smsTempId, this.commonserveice.langReplace(this.messaageslist.smsTempId), 'smsTempId'))) { }
        else if (!this.vldChkLst.selectDropdown(messageTypeVal, this.commonserveice.langReplace(this.messaageslist.messageType), 'messageType')) { }
        else if ((this.messageType == 1) && (!this.vldChkLst.selectDropdown(eventTypeVal, this.commonserveice.langReplace(this.messaageslist.eventType), 'eventType'))) { }
        else if ((this.mailsmstoApplicant == '') && (!this.vldChkLst.blankCheck(this.mailsmstoAuthority, this.commonserveice.langReplace(this.messaageslist.to)))) { }
        else if ((configtypeVal == 1) && (this.mailsmstoApplicant == 1) && (!this.vldChkLst.blankCheck(this.emailId, this.commonserveice.langReplace(this.messaageslist.emailId), 'emailId'))) { }
        else if ((configtypeVal != 1) && (this.mailsmstoApplicant == 1) && (!this.vldChkLst.blankCheck(this.mobileNo, this.commonserveice.langReplace(this.messaageslist.mobileNo), 'mobileNo'))) { }
        else if (!this.vldChkLst.blankCheck(smsSubjectVal, this.commonserveice.langReplace(this.messaageslist.smsSubject), 'smsSubject')) { }
        // else if ((configtypeVal == 1) && (!this.vldChkLst.blankCheck(intMailTemplateVal,this.messaageslist.intMailTemplate))) {}
        else if ((configtypeVal == 3) && (!this.vldChkLst.selectDropdown(intDocumentType, this.commonserveice.langReplace(this.messaageslist.intDocumentType), 'fileType'))) { }
        else if ((configtypeVal == 3) && (!this.vldChkLst.selectDropdown(vchDocument, this.commonserveice.langReplace(this.messaageslist.vchDocument), 'documentFile'))) { }
        else if (!this.vldChkLst.blankCheck(messageContentVal, this.commonserveice.langReplace(this.messaageslist.smscontent), 'messageContent')) { }
        else {
            if (this.varlist.formEnable == false) {
                this.txtFormId = this.varlist.formId;
            }
            else if ((this.varlist.formEnable == true) && (this.varlist.dynamicForm == false)) {
                this.txtFormId = this.selformId;
            }
            messageContentVal = this.encDec.escapeHtml(messageContentVal);
            let mailSmsApp = '';
            if (this.mailsmstoApplicant && this.mailsmstoAuthority) {
                mailSmsApp = '1,2';
            }
            else if (this.mailsmstoAuthority) {
                mailSmsApp = '2';
            }
            else if (this.mailsmstoApplicant) {
                mailSmsApp = '1';
            }
            let formparams = {
                "itemId": this.messageId,
                "formId": this.txtFormId,
                "messageConfType": configtypeVal,
                "smsTemplateId": smsTempIdVal,
                "messageType": messageTypeVal,
                "eventType": eventTypeVal,
                "subject": smsSubjectVal,
                "messageContent": messageContentVal,
                "intCreatedBy": this.userId,
                "intUpdatedBy": this.userId,
                "intMailTemplate": this.intMailTemplate,
                "intDocumentType": intDocumentType,
                "vchDocument": vchDocument,
                "vchLanguage": vchLanguage,
                "itemStatus": '',
                "vchEmailIdKey": this.emailId,
                "vchMobileKey": this.mobileNo,
                "gateWayconfigId": this.gateWayconfigtype,
                "mailSmsTo": mailSmsApp
            };
            this.commonserveice.newMessage(formparams).subscribe((response) => {
                let respData = response.RESPONSE_DATA;
                let respToken = response.RESPONSE_TOKEN;
                let verifyToken = CryptoJS.HmacSHA256(respData, this.varlist.apiHashingKey).toString();
                if (respToken == verifyToken) {
                    let res = Buffer.from(respData, 'base64');
                    let responseResult = JSON.parse(res);
                    if (responseResult.status == 200) {
                        Swal.fire({
                            text: this.commonserveice.langReplace(this.messaageslist.successMsg),
                            icon: 'success',
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: this.commonserveice.langReplace('Ok')
                        }).then((result) => {
                            if (messageTypeVal == 1) {
                                this.route.navigate(['/admin/viewmessageengine']);
                            }
                            else {
                                this.route.navigate(['/admin/viewmessagereminder']);
                            }
                            this.resetform();
                        });
                    }
                    else if (responseResult.status == 202) {
                        // this.loading=false;
                        Swal.fire({
                            text: this.commonserveice.langReplace(this.messaageslist.updatesuccessMsg),
                            icon: 'success',
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: this.commonserveice.langReplace('Ok')
                        }).then((result) => {
                            if (messageTypeVal == 1) {
                                this.route.navigate(['../viewmessageengine']);
                            }
                            else {
                                this.route.navigate(['..viewmessagereminder']);
                            }
                            this.resetform();
                        });
                    }
                    else if (responseResult.status == 501) {
                        this.commonserveice.directlogoutlib();
                    }
                    else if (responseResult.status == 400) {
                        // this.loading=false;
                        Swal.fire({
                            icon: 'error',
                            text: responseResult.message.metaName[0],
                        });
                    }
                    else {
                        //this.loading=false;
                        Swal.fire({
                            icon: 'error',
                            text: this.commonserveice.langReplace(this.varlist.somethingWrong)
                        });
                    }
                }
                else {
                    Swal.fire({
                        icon: 'error',
                        text: this.messaageslist.errorMsg,
                    });
                }
            }, (error) => {
                // this.loading=false;
                Swal.fire({
                    icon: 'error',
                    text: this.commonserveice.langReplace(this.varlist.errorApiResponse),
                });
            });
        }
    }
    getMessageinfo() {
        let messageParams = {
            "intMessageConfigId": this.messageId,
            "intMessageConfigType": '',
            "formId": "",
            "formName": ''
        };
        this.commonserveice.viewMessage(messageParams).subscribe((resp) => {
            let respData = resp.RESPONSE_DATA;
            let respToken = resp.RESPONSE_TOKEN;
            let verifyToken = CryptoJS.HmacSHA256(respData, this.varlist.apiHashingKey).toString();
            if (respToken == verifyToken) {
                let res = Buffer.from(respData, 'base64');
                res = JSON.parse(res.toString());
                if (res.status == 200) {
                    this.messageList = res.result;
                    if (this.messageList.length > 0) {
                        setTimeout(() => {
                            this.selformId = this.messageList[0].intProcessId;
                        }, 1000);
                        this.configtype = this.messageList[0].intMessageConfigType;
                        this.formnames = this.messageList[0].intProcessId;
                        this.messageType = this.messageList[0].intmessageType;
                        this.eventType = this.messageList[0].intEventType;
                        this.smsSubject = this.messageList[0].vchSubject;
                        this.messageContent = this.encDec.decodeHtml(this.messageList[0].vchMessageContent);
                        // this.messageContent = this.messageList[0].vchMessageContent;
                        // console.log(this.encDec.decodeHtml(this.messageList[0].vchMessageContent));
                        // console.log(this.messageList[0].vchMessageContent);
                        this.smsTempId = this.messageList[0].vchSmsTemplateId;
                        this.fileType = this.messageList[0].intDocumentType;
                        this.documentUrl = this.messageList[0].vchDocument;
                        this.intMailTemplate = this.messageList[0].intMailTemplate;
                        this.vchLanguage = this.messageList[0].vchLanguage;
                        this.emailId = this.messageList[0].vchEmailIdKey;
                        this.mobileNo = this.messageList[0].vchMobileKey;
                        let explodedAllMailValue = (this.messageList[0].vchMailSmsTo).split(',');
                        this.gateWayconfigtype = this.messageList[0].intGateWayConfigId;
                        this.getGateWayConfigDetails();
                        if (explodedAllMailValue.includes('1')) {
                            this.mailsmstoApplicant = '1';
                        }
                        if (explodedAllMailValue.includes('2')) {
                            this.mailsmstoAuthority = '2';
                        }
                        // alert(this.messageList[0].vchLanguage);
                    }
                }
                else if (res.status == 417) {
                    Swal.fire({
                        icon: 'error',
                        text: this.commonserveice.langReplace(this.varlist.errorApiResponse)
                    });
                }
                else {
                    Swal.fire({
                        icon: 'error',
                        text: this.commonserveice.langReplace(this.varlist.somethingWrong)
                    });
                }
            }
            else {
                Swal.fire({
                    icon: 'error',
                    text: this.commonserveice.langReplace(this.varlist.errorApiResponse)
                });
            }
        });
    }
    ;
    resetform() {
        this.configtype = "0";
        this.formnames = "0";
        this.smsTempId = null;
        this.messageType = null;
        this.eventType = null;
        this.smsSubject = null;
        this.messageContent = 0;
        this.intMailTemplate = 0;
        this.fileType = 0;
        this.documentFile = null;
        this.vchLanguage = 0;
    }
    //form key and description section----------------------------
    getFormKeys() {
        let keyParams = {
            "itemId": this.txtFormId
        };
        this.commonserveice.getConfigurationKeys(keyParams).subscribe((response) => {
            let respData = response.RESPONSE_DATA;
            let respToken = response.RESPONSE_TOKEN;
            let verifyToken = CryptoJS.HmacSHA256(respData, this.varlist.apiHashingKey).toString();
            if (respToken == verifyToken) {
                let res = Buffer.from(respData, 'base64');
                res = JSON.parse(res.toString());
                if (res.status == 200) {
                    this.keysArray = res.result;
                }
                else if (res.status == 417) {
                    Swal.fire({
                        icon: 'error',
                        text: this.commonserveice.langReplace(this.varlist.invalidResponse)
                    });
                }
                else {
                    Swal.fire({
                        icon: 'error',
                        text: this.commonserveice.langReplace(this.varlist.somethingWrong)
                    });
                }
            }
            else {
                Swal.fire({
                    icon: 'error',
                    text: this.commonserveice.langReplace(this.varlist.invalidResponse),
                });
            }
        });
    }
    //
    getStaticFormKeys() {
        let keyParams = {};
        this.commonserveice.getStaticConfigurationKeys(keyParams).subscribe((response) => {
            let respData = response.RESPONSE_DATA;
            let respToken = response.RESPONSE_TOKEN;
            let verifyToken = CryptoJS.HmacSHA256(respData, this.varlist.apiHashingKey).toString();
            if (respToken == verifyToken) {
                let res = Buffer.from(respData, 'base64');
                res = JSON.parse(res.toString());
                if (res.status == 200) {
                    this.StatickeysArray = res.result;
                }
                else if (res.status == 417) {
                    Swal.fire({
                        icon: 'error',
                        text: this.commonserveice.langReplace(this.varlist.invalidResponse)
                    });
                }
                else {
                    Swal.fire({
                        icon: 'error',
                        text: this.commonserveice.langReplace(this.varlist.somethingWrong)
                    });
                }
            }
            else {
                Swal.fire({
                    icon: 'error',
                    text: this.commonserveice.langReplace(this.varlist.invalidResponse)
                });
            }
        });
    }
    getLanguage() {
        let params = {
            "intId": '',
        };
        this.commonserveice.getLanguage(params).subscribe((resp) => {
            let respData = resp.RESPONSE_DATA;
            let respToken = resp.RESPONSE_TOKEN;
            let verifyToken = CryptoJS.HmacSHA256(respData, this.varlist.apiHashingKey).toString();
            if (respToken == verifyToken) {
                let res = Buffer.from(respData, 'base64');
                res = JSON.parse(res.toString());
                if (res.status == 200) {
                    this.languageList = res.result;
                    //   console.log(this.languageList)
                }
                else {
                    console.log(res.messages);
                }
            }
            else {
                Swal.fire({
                    icon: 'error',
                    text: this.commonserveice.langReplace(this.varlist.invalidResponse)
                });
            }
        });
    }
    // addChangeEventForLabel() {
    //   let sessionUserLangtoken: any = sessionStorage.getItem('USER_LANGPREF');
    //   let sessionUserLang = JSON.parse(CryptoJS.AES.decrypt(sessionUserLangtoken, this.varlist.apiHashingKey).toString(CryptoJS.enc.Utf8));
    //   setTimeout(() => {
    //     this.langKey = sessionUserLang;
    //     let labelChangeEle: any = document.getElementById('languageListH');
    //     labelChangeEle.addEventListener('change', () => {
    //       this.langKey = labelChangeEle.value;
    //     });
    //   }, 1000);
    // }
    mailSmsTo(evt) {
        let elemnt = evt.target;
        if (elemnt.checked) {
            if (evt.target.value == 1) {
                this.mailsmstoApplicant = evt.target.value;
            }
            else {
                this.mailsmstoAuthority = evt.target.value;
            }
        }
        else {
            if (evt.target.value == 1) {
                this.mailsmstoApplicant = 0;
            }
            else {
                this.mailsmstoAuthority = 0;
            }
        }
    }
    getGateWayConfigDetails() {
        let params = {
            "tinType": this.configtype,
        };
        this.commonserveice.getFetchPublishRecord(params).subscribe((response) => {
            let respToken = response.RESPONSE_TOKEN;
            let respData = response.RESPONSE_DATA;
            let verifyToken = CryptoJS.HmacSHA256(respData, this.varlist.apiHashingKey).toString();
            if (respToken == verifyToken) {
                let respData = response.RESPONSE_DATA;
                let res = Buffer.from(respData, 'base64');
                res = JSON.parse(res.toString());
                if (res.status == 200) {
                    this.gatewayconfigDetails = res.result;
                }
                else if (res.status == 400) {
                    Swal.fire({
                        icon: 'error',
                        text: "error",
                    });
                }
            }
        });
    }
}
AddmsgengineComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: AddmsgengineComponent, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }, { token: i2.HttpClient }, { token: i3.ValidatorchecklistService }, { token: i4.EncrypyDecrpyService }, { token: i5.MsgengineLibService }, { token: i6.VarlistService }], target: i0.ɵɵFactoryTarget.Component });
AddmsgengineComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: AddmsgengineComponent, selector: "lib-addmsgengine", viewQueries: [{ propertyName: "ckeditor", first: true, predicate: ["myckeditor"], descendants: true }], ngImport: i0, template: "<!--===Page Title===-->\n<div class=\"page-title\">\n\n    <h4>{{title | translate}}</h4>\n </div>\n <!--===Page Title===-->\n <div class=\"page-controls-section\" id=\"page-content\">\n    <div class=\"card\">\n       <div class=\"controls-section-header\">\n        \n        \n\n          <ul class=\"nav nav-tabs nav-fill\" role=\"tablist\">\n            <lib-libtabs *ngFor=\"let tablist of tablist\" [tabMessage]=\"tablist\" [activeid]=\"messageId\"></lib-libtabs>\n           \n         </ul>\n         <div class=\"indicatorslist\">\n             <lib-libutils *ngFor=\"let utillist of utillist\" [childMessage]=\"utillist\"></lib-libutils>\n            \n         </div>\n\n       </div>\n       <div class=\"card-body\">\n          <div class=\"controls-section\">\n           \n             <div class=\"row\">\n                <div class=\"col-md-6\">\n                  <div class=\"form-group\" *ngIf=\"formenable && !dynamicForm\">\n                 \n                     <div class=\"row\">\n                        <label class=\"col-md-6 col-lg-4\">* {{\"Form Name\" | translate}}</label>\n                        <div class=\"col-md-6 col-lg-6\">\n                           <select class=\"form-select\" id=\"selformId\" [(ngModel)]=\"selformId\">\n                              <option value=0>{{\"Select\" | translate}}</option>\n                              <option *ngFor=\"let flist of formNameslist\" value=\"{{flist.intId}}\">\n                                 {{flist.vchProcessName}}\n                              </option>\n                              \n                           </select>\n                           \n                        </div>\n                     </div>\n                  </div>\n                   <div class=\"form-group\" *ngIf=\"formenable && dynamicForm\">\n                 \n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Form Name\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <input type=\"text\" class=\"form-control\" id=\"txtProcessName\" readonly [value]=\"txtProcessName\">\n                            <input type=\"hidden\" class=\"form-control\" [(ngModel)]=\"formnames\">\n                         </div>\n                      </div>\n                   </div>\n                   <div class=\"form-group\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Configuration Type\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <select class=\"form-select docSizeType\" id=\"configtype\" [(ngModel)]=\"configtype\" (change)=\"getGateWayConfigDetails()\">\n                               <option value=0  selected>{{\"Select\" | translate}}</option>\n                               <option value=1>Mail</option>\n                               <option value=2>SMS</option>\n                               <option value=9>Whatsapp</option>\n                            </select>\n                         </div>\n                      </div>\n                   </div>\n                   <div class=\"form-group\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Configuration\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <select class=\"form-select docSizeType\" id=\"gatewayConfigurationType\" [(ngModel)]=\"gateWayconfigtype\">\n                               <option value='0' [selected]=\"true\">{{\"Select\" | translate}}</option>\n                               <ng-container *ngFor=\"let gtway of gatewayconfigDetails\">\n                                  <option  value={{gtway.intId}} [selected]=\"gtway.intId==gateWayconfigtype\">{{gtway.vchName}}</option>\n                               </ng-container>\n                               \n                            </select>\n                         </div>\n                      </div>\n                   </div>\n                   <div class=\"form-group\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Message Type\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <select class=\"form-select docSizeType\" id=\"messageType\" name=\"messageType\" [(ngModel)]=\"messageType\">\n                               <option value=0 disabled selected>{{\"Select\" | translate}}</option>\n                               <option value=1>Messaging</option>\n                               <option value=2>Reminder</option>\n                            </select>\n                         </div>\n                      </div>\n                   </div>\n \n                   <!-- get language -->\n                   <div class=\"form-group\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Languages\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <!-- {{vchLanguage | json }}\n                            -->\n                            <select class=\"form-select docSizeType\" name=\"vchLanguage\" id=\"vchLanguage\" [(ngModel)]=\"vchLanguage\">\n                               <option value=0 disabled selected>{{\"Select\" | translate}}</option>\n                               <!-- <option value=0>--Select--</option>\n                               <option value=\"en\">English</option> -->\n                               \n                               <option *ngFor=\"let mNames of languageList\"  value=\"{{mNames.vchAliasName}}\">\n                                  {{mNames.vchLanguageName}}\n                               </option>\n                            </select>\n                         </div>\n                      </div>\n                   </div>\n \n                   <div class=\"form-group\" *ngIf=\"configtype == 2\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"SMS Template Id\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <input type=\"text\" class=\"form-control\" id=\"smsTempId\" name=\"smsTempId\" [(ngModel)]=\"smsTempId\">\n                         </div>\n                      </div>\n                   </div>\n \n                   <div class=\"form-group\" *ngIf=\"messageType == 1\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Events\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <select class=\"form-select docSizeType\" name=\"messageType\" id=\"eventType\" [(ngModel)]=\"eventType\">\n                               <option value=0 disabled selected>{{\"Select\" | translate}}</option>\n                               <option value=1>OnSubmit</option>\n                               <option value=2>OnLoad</option>\n                            </select>\n                         </div>\n                      </div>\n                   </div>\n                   <div class=\"form-group\" >\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"To\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\"><div class=\"form-check form-check-inline\">\n                            <input name=\"mailSmsTo\" type=\"checkbox\" id=\"mailSmsTo1\" class=\"form-check-input\" value=\"1\" (change)=\"mailSmsTo($event)\" [checked]=\"mailsmstoApplicant=='1'\">\n                            <label for=\"mailSmsTo1\" class=\"form-check-label\">{{\"Applicant\" | translate}}</label></div><div class=\"form-check form-check-inline\"><input name=\"mailSmsTo\" type=\"checkbox\" id=\"mailSmsTo2\" class=\"form-check-input \" value=\"2\" (change)=\"mailSmsTo($event)\" [checked]=\"mailsmstoAuthority=='2'\"><label for=\"mailSmsTo2\" class=\"form-check-label\">{{\"Authority\" | translate}}</label></div></div> \n                      </div>\n                   </div>\n                   <div class=\"form-group\" *ngIf=\"mailsmstoApplicant==1 && configtype==1\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Email\" | translate}} ({{\"key\" | translate}})</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <input type=\"text\" class=\"form-control\" name=\"emailId\" id=\"emailId\" [(ngModel)]=\"emailId\">\n                         </div>\n                      </div>\n                   </div>\n                   <div class=\"form-group\" *ngIf=\"mailsmstoApplicant==1 && configtype!=1\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Mobile No\" | translate}} ({{\"key\" | translate}})</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <input type=\"text\" class=\"form-control\" name=\"mobileNo\" id=\"mobileNo\" [(ngModel)]=\"mobileNo\">\n                         </div>\n                      </div>\n                   </div>\n                   <!-- mailsmstoApplicant -->\n                   <div class=\"form-group\" >\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Subject\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <input type=\"text\" class=\"form-control\" name=\"smsSubject\" id=\"smsSubject\" [(ngModel)]=\"smsSubject\">\n                         </div>\n                      </div>\n                   </div>\n                   <div class=\"form-group d-none\" *ngIf=\"configtype == 1\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Choose Template\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <select class=\"form-select docSizeType\" name=\"messageType\" id=\"intMailTemplate\" [(ngModel)]=\"intMailTemplate\">\n                               <option value=0 disabled selected>{{\"Select\" | translate}}</option>\n                               <option value=temp_1>Template-1</option>\n                               <option value=temp_2>Template-2</option>\n                               <option value=temp_3>Template-3</option>\n                            </select>\n                         </div>\n                      </div>\n                   </div>\n                  \n                   <div class=\"form-group\" *ngIf=\"configtype == 9\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Document Type\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <select class=\"form-select docSizeType\" id=\"fileType\" name=\"messageType\" (change)=\"changedocType()\"\n                               [(ngModel)]=\"fileType\">\n                               <option value=0 disabled selected>{{\"Select\" | translate}}</option>\n                               <option value=1>Audio</option>\n                               <option value=2>Video</option>\n                               <option value=3>Image</option>\n                            </select>\n                         </div>\n                      </div>\n                   </div>\n                   \n                   <div class=\"form-group row\" *ngIf=\"configtype == 9 && fileType > 0 \">\n                      <label class=\"col-md-6 col-lg-4\">* {{\"Upload Document\" | translate}}</label>\n                      <div class=\"col-md-6 col-lg-6\">\n                        <div *ngIf=\"fileeList?.length == 0\">\n                           <div class=\"custom-dropzone\" ngx-dropzone  (change)=\"fileType > 0 ? onSelect($event) :''\" >\n                                   <ngx-dropzone-label>\n                                     <div>\n                                           <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"63\" height=\"64\" viewBox=\"0 0 63 64\">\n                                               <g  fill-rule=\"nonzero\">\n                                                   <path\n                                                       d=\"M42.656 15.135a1.953 1.953 0 0 1-1.391-.578L31.5 4.795l-9.765 9.762a1.97 1.97 0 1 1-2.785-2.785L30.106.616a1.97 1.97 0 0 1 2.785 0l11.157 11.156a1.97 1.97 0 0 1-1.392 3.363z\" />\n                                                   <path\n                                                       d=\"M31.5 36.791a1.97 1.97 0 0 1-1.969-1.969V2.01a1.97 1.97 0 0 1 3.938 0v32.812a1.97 1.97 0 0 1-1.969 1.969z\" />\n                                                   <path\n                                                       d=\"M55.781 63.041H7.22A7.225 7.225 0 0 1 0 55.822V41.385a4.599 4.599 0 0 1 4.594-4.594h7.234a4.567 4.567 0 0 1 4.402 3.276l2.814 9.382a.658.658 0 0 0 .628.467h23.656a.658.658 0 0 0 .628-.467l2.814-9.385a4.572 4.572 0 0 1 4.402-3.273h7.234A4.599 4.599 0 0 1 63 41.385v14.437a7.225 7.225 0 0 1-7.219 7.219zM4.594 40.729a.656.656 0 0 0-.657.656v14.437a3.286 3.286 0 0 0 3.282 3.282H55.78a3.286 3.286 0 0 0 3.282-3.282V41.385a.656.656 0 0 0-.657-.656h-7.234a.65.65 0 0 0-.628.467L47.73 50.58a4.628 4.628 0 0 1-4.402 3.274H19.672a4.567 4.567 0 0 1-4.402-3.276l-2.814-9.382a.65.65 0 0 0-.628-.467H4.594z\" />\n                                               </g>\n                                           </svg>\n                                       \n                                           <h3>{{\"Drag and drop file here\" | translate}}</h3>\n                                           <h3>{{\"or\" | translate}}</h3>\n                                           <label for=\"fileDropRef\">{{\"Browse for file\" | translate}}</label>\n                                      \n                                     </div>\n                                   </ngx-dropzone-label>\n                                 </div>\n\n                             \n                               </div>\n                         <small class=\"text-danger\" *ngIf=\"(fileType == 1) && (fileeList?.length == 0)\">\n                            ({{\"Only .mp3, .mpeg file only maxsize 5 MB\"}})\n                         </small>\n                         <small class=\"text-danger\" *ngIf=\"(fileType == 2) && (fileeList?.length == 0)\">\n                            ({{\"Only .mp4,.wmv, .webm files only maxsize 10 MB\"}})\n                         </small>\n                         <small class=\"text-danger\" *ngIf=\"(fileType == 3) && (fileeList?.length == 0)\">\n                            ({{\"Only .jpg, .jpeg, .png file only maxsize 1 MB\"}})\n                         </small>\n                         <div class=\"files-list\" href=\"javascript:void(0)\" *ngFor=\"let f of fileeList\" >\n                           <div>\n                             <i class=\"h6 mr-1\" [ngClass]=\"getfiletypeicon(f.fileType)\" ></i> \n                           <span>{{f.fileName}}</span>\n                        </div>\n                       \n                           <a (click)=\"onRemove(f)\" class=\"text-danger\" ngbTooltip=\"Back to upload\" title=\"\"  data-original-title=\"Cancel\"><i class=\"bi bi-trash\"></i></a>\n                       </div>\n                      </div>\n                   \n                      <!-- <div class=\"col-md-1 col-lg-1\">\n                         <div *ngIf=\"fileType == 1 && documentUrl\">\n                            <audio controls>\n                               <source src=\"{{documentUrl}}\" type=\"audio/ogg\">\n                               <source src=\"{{documentUrl}}\" type=\"audio/mpeg\">\n                               {{\"Your browser does not support the audio tag\"}}.\n                            </audio>\n \n                         </div>\n                         <div *ngIf=\"fileType == 2 && documentUrl\">\n                            <video style=\"width:100%\" style=\"height:80px\" controls>\n                               <source src=\"{{documentUrl}}\" type=\"video/mp4\">\n                               <source src=\"{{documentUrl}}\" type=\"video/ogg\">\n                               {{\"Your browser does not support the video tag\"}}.\n                            </video>\n \n                         </div>\n                         <div *ngIf=\"fileType == 3 && documentUrl\">\n                            <img src=\"{{documentUrl}}\" class=\"border\" width=\"100%\" alt=\"{{documentUrl}}\">\n                         </div>\n                      </div> -->\n                   </div>\n                </div>\n \n                <!-- =========== Dynamic Key Description Section Start =================== -->\n \n                <div class=\"col-md-6\">\n                   <div class=\"mb-4\" *ngIf=\"formenable\">\n                      <h6>{{\"Dynamic keys for value\"}} <small><i\n                               class=\"fa fa-question-circle pos-abs  hlpICNKey\" data-phlp=\"tooltip\"\n                               style=\"top:10px;right:-15px;cursor: pointer;\"></i></small></h6>\n                      <div class=\"p-2 overflow-auto\" style=\"height:240px;\">\n                         <table class=\"table table-bordered\">\n                            <thead>\n                               <tr>\n                                  <th scope=\"col\">{{\"Key\" | translate}}</th>\n                                  <th scope=\"col\">{{\"Label Name\" | translate}}</th>\n                               </tr>\n                            </thead>\n                            <tbody>\n                               <tr *ngFor=\"let keys of keysArray; let i = index\">\n                                  <td>{{'{' +keys.ctrlId+'}'}}</td>\n                                  <td>{{keys.ctrlLabel}}</td>\n                               </tr>\n                            </tbody>\n                         </table>\n                      </div>\n </div>\n                      <div class=\"\" >\n                      <h6 >{{\"Static keys for value\" | translate}} <small><i\n                         class=\"fa fa-question-circle pos-abs  hlpICNKey\" data-phlp=\"tooltip\"\n                         style=\"top:10px;right:-15px;cursor: pointer;\"></i></small></h6>\n                <div class=\"overflow-auto\" style=\"height:240px;\">\n                   <table class=\"table table-bordered\">\n                      <thead>\n                         <tr>\n                            <th scope=\"col\">{{\"Key\" | translate}}</th>\n                            <th scope=\"col\">{{\"Key Description\" | translate}}</th>\n                         </tr>\n                      </thead>\n                      <tbody>\n                         <tr *ngFor=\"let keys of StatickeysArray let i = index\">\n                            <td>{{keys.keyName}}</td>\n                            <td>{{keys.keyDescription}}</td>\n                         </tr>\n                      </tbody>\n                   </table>\n                </div>\n           \n                   </div>\n                </div>\n                <!-- =========== Dynamic Key Description Section End =================== -->\n                <div class=\"form-group\">\n                   <div class=\"row\">\n                      <label class=\"col-md-4 col-lg-2\">* {{\"Message Content\" | translate}}</label>\n                      <div class=\"col-md-8 col-lg-10\">\n                        <ckeditor [(ngModel)]=\"messageContent\"  id=\"messageContent\"\n                        #myckeditor=\"ngModel\"\n                        name=\"myckeditor\"\n                        required\n                        [config]=\"ckeConfig\" \n                        debounce=\"500\" \n                        >\n                       \n                        </ckeditor>\n                         <!-- <app-ckeditornew [ckdesc]=\"messageContent\" [(ngModel)]=\"messageContent\"></app-ckeditornew> -->\n                      </div>\n                   </div>\n                </div>\n             </div>\n          </div>\n \n          <div class=\"form-group\">\n             <div class=\"row\">\n                <label class=\"col-md-4 col-lg-2\"></label>\n                <div class=\"col-md-8 col-lg-10\" *ngIf=\"messageId == ''\">\n \n                   <button class=\"btn btn-primary\"\n                      (click)=\"newGenerateMessage()\">{{\"Submit\" | translate}}</button>\n                   <button class=\"btn btn-danger ml-1\" (click)=\"resetform()\">{{\"Reset\" | translate}}</button>\n                </div>\n                <div class=\"col-md-8 col-lg-10\" *ngIf=\"messageId\">\n \n                   <button class=\"btn btn-primary\"\n                      (click)=\"newGenerateMessage()\">{{\"Update\" | translate}}</button>\n                   <button class=\"btn btn-danger ml-1\" (click)=\"resetform()\">{{\"Cancel\" | translate}}</button>\n                </div>\n             </div>\n          </div>\n       </div>\n    </div>\n </div>\n", styles: [".files-list{display:flex;margin-bottom:.5rem;padding:.8rem 1rem;background:#f7f7f7;border-radius:2px;align-items:center;justify-content:space-between;border:1px solid #e1e1e1;cursor:pointer;word-break:break-all}.files-list i{font-size:1.3rem}.files-list:hover{background:#dedede}.custom-dropzone{margin-bottom:1rem}.btn-dropzone{height:auto}.custom-dropzone{height:auto;background:var(--bg-white);border:3px dashed var(--bs-gray-200);border-radius:5px;padding:.5rem}.custom-dropzone label{color:#fff;width:auto;border-radius:4px;background-color:var(--base-color-600);padding:.6rem 1.2rem;transition:all ease-in-out .5s}.custom-dropzone svg{fill:var(--bs-gray-200);margin-bottom:.5rem;height:40px}.ngx-dropzone-label{margin:0}.custom-dropzone h3{font-size:1rem;color:var(--bs-gray-400)}.custom-dropzone:hover label{background-color:var(--base-color-700)}\n"], dependencies: [{ kind: "directive", type: i7.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i8.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i8.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i8.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i8.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i8.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i8.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i9.NgxDropzoneComponent, selector: "ngx-dropzone, [ngx-dropzone]", inputs: ["accept", "disabled", "multiple", "maxFileSize", "expandable", "disableClick", "processDirectoryDrop", "id", "aria-label", "aria-labelledby", "aria-describedby"], outputs: ["change"] }, { kind: "directive", type: i9.NgxDropzoneLabelDirective, selector: "ngx-dropzone-label" }, { kind: "directive", type: i10.NgbTooltip, selector: "[ngbTooltip]", inputs: ["animation", "autoClose", "placement", "triggers", "container", "disableTooltip", "tooltipClass", "openDelay", "closeDelay", "ngbTooltip"], outputs: ["shown", "hidden"], exportAs: ["ngbTooltip"] }, { kind: "component", type: i11.CKEditorComponent, selector: "ckeditor", inputs: ["editorUrl", "tagName", "type", "data", "readOnly", "config"], outputs: ["namespaceLoaded", "ready", "dataReady", "change", "dataChange", "dragStart", "dragEnd", "drop", "fileUploadResponse", "fileUploadRequest", "focus", "paste", "afterPaste", "blur"] }, { kind: "component", type: i12.LibtabsComponent, selector: "lib-libtabs", inputs: ["tabMessage", "activeid"] }, { kind: "component", type: i13.LibutilsComponent, selector: "lib-libutils", inputs: ["childMessage", "sendIds", "funType", "pubUnpubStatus", "reloadUrl"], outputs: ["callfunction", "callfunction3"] }, { kind: "pipe", type: i14.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: AddmsgengineComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-addmsgengine', template: "<!--===Page Title===-->\n<div class=\"page-title\">\n\n    <h4>{{title | translate}}</h4>\n </div>\n <!--===Page Title===-->\n <div class=\"page-controls-section\" id=\"page-content\">\n    <div class=\"card\">\n       <div class=\"controls-section-header\">\n        \n        \n\n          <ul class=\"nav nav-tabs nav-fill\" role=\"tablist\">\n            <lib-libtabs *ngFor=\"let tablist of tablist\" [tabMessage]=\"tablist\" [activeid]=\"messageId\"></lib-libtabs>\n           \n         </ul>\n         <div class=\"indicatorslist\">\n             <lib-libutils *ngFor=\"let utillist of utillist\" [childMessage]=\"utillist\"></lib-libutils>\n            \n         </div>\n\n       </div>\n       <div class=\"card-body\">\n          <div class=\"controls-section\">\n           \n             <div class=\"row\">\n                <div class=\"col-md-6\">\n                  <div class=\"form-group\" *ngIf=\"formenable && !dynamicForm\">\n                 \n                     <div class=\"row\">\n                        <label class=\"col-md-6 col-lg-4\">* {{\"Form Name\" | translate}}</label>\n                        <div class=\"col-md-6 col-lg-6\">\n                           <select class=\"form-select\" id=\"selformId\" [(ngModel)]=\"selformId\">\n                              <option value=0>{{\"Select\" | translate}}</option>\n                              <option *ngFor=\"let flist of formNameslist\" value=\"{{flist.intId}}\">\n                                 {{flist.vchProcessName}}\n                              </option>\n                              \n                           </select>\n                           \n                        </div>\n                     </div>\n                  </div>\n                   <div class=\"form-group\" *ngIf=\"formenable && dynamicForm\">\n                 \n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Form Name\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <input type=\"text\" class=\"form-control\" id=\"txtProcessName\" readonly [value]=\"txtProcessName\">\n                            <input type=\"hidden\" class=\"form-control\" [(ngModel)]=\"formnames\">\n                         </div>\n                      </div>\n                   </div>\n                   <div class=\"form-group\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Configuration Type\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <select class=\"form-select docSizeType\" id=\"configtype\" [(ngModel)]=\"configtype\" (change)=\"getGateWayConfigDetails()\">\n                               <option value=0  selected>{{\"Select\" | translate}}</option>\n                               <option value=1>Mail</option>\n                               <option value=2>SMS</option>\n                               <option value=9>Whatsapp</option>\n                            </select>\n                         </div>\n                      </div>\n                   </div>\n                   <div class=\"form-group\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Configuration\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <select class=\"form-select docSizeType\" id=\"gatewayConfigurationType\" [(ngModel)]=\"gateWayconfigtype\">\n                               <option value='0' [selected]=\"true\">{{\"Select\" | translate}}</option>\n                               <ng-container *ngFor=\"let gtway of gatewayconfigDetails\">\n                                  <option  value={{gtway.intId}} [selected]=\"gtway.intId==gateWayconfigtype\">{{gtway.vchName}}</option>\n                               </ng-container>\n                               \n                            </select>\n                         </div>\n                      </div>\n                   </div>\n                   <div class=\"form-group\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Message Type\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <select class=\"form-select docSizeType\" id=\"messageType\" name=\"messageType\" [(ngModel)]=\"messageType\">\n                               <option value=0 disabled selected>{{\"Select\" | translate}}</option>\n                               <option value=1>Messaging</option>\n                               <option value=2>Reminder</option>\n                            </select>\n                         </div>\n                      </div>\n                   </div>\n \n                   <!-- get language -->\n                   <div class=\"form-group\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Languages\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <!-- {{vchLanguage | json }}\n                            -->\n                            <select class=\"form-select docSizeType\" name=\"vchLanguage\" id=\"vchLanguage\" [(ngModel)]=\"vchLanguage\">\n                               <option value=0 disabled selected>{{\"Select\" | translate}}</option>\n                               <!-- <option value=0>--Select--</option>\n                               <option value=\"en\">English</option> -->\n                               \n                               <option *ngFor=\"let mNames of languageList\"  value=\"{{mNames.vchAliasName}}\">\n                                  {{mNames.vchLanguageName}}\n                               </option>\n                            </select>\n                         </div>\n                      </div>\n                   </div>\n \n                   <div class=\"form-group\" *ngIf=\"configtype == 2\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"SMS Template Id\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <input type=\"text\" class=\"form-control\" id=\"smsTempId\" name=\"smsTempId\" [(ngModel)]=\"smsTempId\">\n                         </div>\n                      </div>\n                   </div>\n \n                   <div class=\"form-group\" *ngIf=\"messageType == 1\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Events\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <select class=\"form-select docSizeType\" name=\"messageType\" id=\"eventType\" [(ngModel)]=\"eventType\">\n                               <option value=0 disabled selected>{{\"Select\" | translate}}</option>\n                               <option value=1>OnSubmit</option>\n                               <option value=2>OnLoad</option>\n                            </select>\n                         </div>\n                      </div>\n                   </div>\n                   <div class=\"form-group\" >\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"To\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\"><div class=\"form-check form-check-inline\">\n                            <input name=\"mailSmsTo\" type=\"checkbox\" id=\"mailSmsTo1\" class=\"form-check-input\" value=\"1\" (change)=\"mailSmsTo($event)\" [checked]=\"mailsmstoApplicant=='1'\">\n                            <label for=\"mailSmsTo1\" class=\"form-check-label\">{{\"Applicant\" | translate}}</label></div><div class=\"form-check form-check-inline\"><input name=\"mailSmsTo\" type=\"checkbox\" id=\"mailSmsTo2\" class=\"form-check-input \" value=\"2\" (change)=\"mailSmsTo($event)\" [checked]=\"mailsmstoAuthority=='2'\"><label for=\"mailSmsTo2\" class=\"form-check-label\">{{\"Authority\" | translate}}</label></div></div> \n                      </div>\n                   </div>\n                   <div class=\"form-group\" *ngIf=\"mailsmstoApplicant==1 && configtype==1\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Email\" | translate}} ({{\"key\" | translate}})</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <input type=\"text\" class=\"form-control\" name=\"emailId\" id=\"emailId\" [(ngModel)]=\"emailId\">\n                         </div>\n                      </div>\n                   </div>\n                   <div class=\"form-group\" *ngIf=\"mailsmstoApplicant==1 && configtype!=1\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Mobile No\" | translate}} ({{\"key\" | translate}})</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <input type=\"text\" class=\"form-control\" name=\"mobileNo\" id=\"mobileNo\" [(ngModel)]=\"mobileNo\">\n                         </div>\n                      </div>\n                   </div>\n                   <!-- mailsmstoApplicant -->\n                   <div class=\"form-group\" >\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Subject\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <input type=\"text\" class=\"form-control\" name=\"smsSubject\" id=\"smsSubject\" [(ngModel)]=\"smsSubject\">\n                         </div>\n                      </div>\n                   </div>\n                   <div class=\"form-group d-none\" *ngIf=\"configtype == 1\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Choose Template\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <select class=\"form-select docSizeType\" name=\"messageType\" id=\"intMailTemplate\" [(ngModel)]=\"intMailTemplate\">\n                               <option value=0 disabled selected>{{\"Select\" | translate}}</option>\n                               <option value=temp_1>Template-1</option>\n                               <option value=temp_2>Template-2</option>\n                               <option value=temp_3>Template-3</option>\n                            </select>\n                         </div>\n                      </div>\n                   </div>\n                  \n                   <div class=\"form-group\" *ngIf=\"configtype == 9\">\n                      <div class=\"row\">\n                         <label class=\"col-md-6 col-lg-4\">* {{\"Document Type\" | translate}}</label>\n                         <div class=\"col-md-6 col-lg-6\">\n                            <select class=\"form-select docSizeType\" id=\"fileType\" name=\"messageType\" (change)=\"changedocType()\"\n                               [(ngModel)]=\"fileType\">\n                               <option value=0 disabled selected>{{\"Select\" | translate}}</option>\n                               <option value=1>Audio</option>\n                               <option value=2>Video</option>\n                               <option value=3>Image</option>\n                            </select>\n                         </div>\n                      </div>\n                   </div>\n                   \n                   <div class=\"form-group row\" *ngIf=\"configtype == 9 && fileType > 0 \">\n                      <label class=\"col-md-6 col-lg-4\">* {{\"Upload Document\" | translate}}</label>\n                      <div class=\"col-md-6 col-lg-6\">\n                        <div *ngIf=\"fileeList?.length == 0\">\n                           <div class=\"custom-dropzone\" ngx-dropzone  (change)=\"fileType > 0 ? onSelect($event) :''\" >\n                                   <ngx-dropzone-label>\n                                     <div>\n                                           <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"63\" height=\"64\" viewBox=\"0 0 63 64\">\n                                               <g  fill-rule=\"nonzero\">\n                                                   <path\n                                                       d=\"M42.656 15.135a1.953 1.953 0 0 1-1.391-.578L31.5 4.795l-9.765 9.762a1.97 1.97 0 1 1-2.785-2.785L30.106.616a1.97 1.97 0 0 1 2.785 0l11.157 11.156a1.97 1.97 0 0 1-1.392 3.363z\" />\n                                                   <path\n                                                       d=\"M31.5 36.791a1.97 1.97 0 0 1-1.969-1.969V2.01a1.97 1.97 0 0 1 3.938 0v32.812a1.97 1.97 0 0 1-1.969 1.969z\" />\n                                                   <path\n                                                       d=\"M55.781 63.041H7.22A7.225 7.225 0 0 1 0 55.822V41.385a4.599 4.599 0 0 1 4.594-4.594h7.234a4.567 4.567 0 0 1 4.402 3.276l2.814 9.382a.658.658 0 0 0 .628.467h23.656a.658.658 0 0 0 .628-.467l2.814-9.385a4.572 4.572 0 0 1 4.402-3.273h7.234A4.599 4.599 0 0 1 63 41.385v14.437a7.225 7.225 0 0 1-7.219 7.219zM4.594 40.729a.656.656 0 0 0-.657.656v14.437a3.286 3.286 0 0 0 3.282 3.282H55.78a3.286 3.286 0 0 0 3.282-3.282V41.385a.656.656 0 0 0-.657-.656h-7.234a.65.65 0 0 0-.628.467L47.73 50.58a4.628 4.628 0 0 1-4.402 3.274H19.672a4.567 4.567 0 0 1-4.402-3.276l-2.814-9.382a.65.65 0 0 0-.628-.467H4.594z\" />\n                                               </g>\n                                           </svg>\n                                       \n                                           <h3>{{\"Drag and drop file here\" | translate}}</h3>\n                                           <h3>{{\"or\" | translate}}</h3>\n                                           <label for=\"fileDropRef\">{{\"Browse for file\" | translate}}</label>\n                                      \n                                     </div>\n                                   </ngx-dropzone-label>\n                                 </div>\n\n                             \n                               </div>\n                         <small class=\"text-danger\" *ngIf=\"(fileType == 1) && (fileeList?.length == 0)\">\n                            ({{\"Only .mp3, .mpeg file only maxsize 5 MB\"}})\n                         </small>\n                         <small class=\"text-danger\" *ngIf=\"(fileType == 2) && (fileeList?.length == 0)\">\n                            ({{\"Only .mp4,.wmv, .webm files only maxsize 10 MB\"}})\n                         </small>\n                         <small class=\"text-danger\" *ngIf=\"(fileType == 3) && (fileeList?.length == 0)\">\n                            ({{\"Only .jpg, .jpeg, .png file only maxsize 1 MB\"}})\n                         </small>\n                         <div class=\"files-list\" href=\"javascript:void(0)\" *ngFor=\"let f of fileeList\" >\n                           <div>\n                             <i class=\"h6 mr-1\" [ngClass]=\"getfiletypeicon(f.fileType)\" ></i> \n                           <span>{{f.fileName}}</span>\n                        </div>\n                       \n                           <a (click)=\"onRemove(f)\" class=\"text-danger\" ngbTooltip=\"Back to upload\" title=\"\"  data-original-title=\"Cancel\"><i class=\"bi bi-trash\"></i></a>\n                       </div>\n                      </div>\n                   \n                      <!-- <div class=\"col-md-1 col-lg-1\">\n                         <div *ngIf=\"fileType == 1 && documentUrl\">\n                            <audio controls>\n                               <source src=\"{{documentUrl}}\" type=\"audio/ogg\">\n                               <source src=\"{{documentUrl}}\" type=\"audio/mpeg\">\n                               {{\"Your browser does not support the audio tag\"}}.\n                            </audio>\n \n                         </div>\n                         <div *ngIf=\"fileType == 2 && documentUrl\">\n                            <video style=\"width:100%\" style=\"height:80px\" controls>\n                               <source src=\"{{documentUrl}}\" type=\"video/mp4\">\n                               <source src=\"{{documentUrl}}\" type=\"video/ogg\">\n                               {{\"Your browser does not support the video tag\"}}.\n                            </video>\n \n                         </div>\n                         <div *ngIf=\"fileType == 3 && documentUrl\">\n                            <img src=\"{{documentUrl}}\" class=\"border\" width=\"100%\" alt=\"{{documentUrl}}\">\n                         </div>\n                      </div> -->\n                   </div>\n                </div>\n \n                <!-- =========== Dynamic Key Description Section Start =================== -->\n \n                <div class=\"col-md-6\">\n                   <div class=\"mb-4\" *ngIf=\"formenable\">\n                      <h6>{{\"Dynamic keys for value\"}} <small><i\n                               class=\"fa fa-question-circle pos-abs  hlpICNKey\" data-phlp=\"tooltip\"\n                               style=\"top:10px;right:-15px;cursor: pointer;\"></i></small></h6>\n                      <div class=\"p-2 overflow-auto\" style=\"height:240px;\">\n                         <table class=\"table table-bordered\">\n                            <thead>\n                               <tr>\n                                  <th scope=\"col\">{{\"Key\" | translate}}</th>\n                                  <th scope=\"col\">{{\"Label Name\" | translate}}</th>\n                               </tr>\n                            </thead>\n                            <tbody>\n                               <tr *ngFor=\"let keys of keysArray; let i = index\">\n                                  <td>{{'{' +keys.ctrlId+'}'}}</td>\n                                  <td>{{keys.ctrlLabel}}</td>\n                               </tr>\n                            </tbody>\n                         </table>\n                      </div>\n </div>\n                      <div class=\"\" >\n                      <h6 >{{\"Static keys for value\" | translate}} <small><i\n                         class=\"fa fa-question-circle pos-abs  hlpICNKey\" data-phlp=\"tooltip\"\n                         style=\"top:10px;right:-15px;cursor: pointer;\"></i></small></h6>\n                <div class=\"overflow-auto\" style=\"height:240px;\">\n                   <table class=\"table table-bordered\">\n                      <thead>\n                         <tr>\n                            <th scope=\"col\">{{\"Key\" | translate}}</th>\n                            <th scope=\"col\">{{\"Key Description\" | translate}}</th>\n                         </tr>\n                      </thead>\n                      <tbody>\n                         <tr *ngFor=\"let keys of StatickeysArray let i = index\">\n                            <td>{{keys.keyName}}</td>\n                            <td>{{keys.keyDescription}}</td>\n                         </tr>\n                      </tbody>\n                   </table>\n                </div>\n           \n                   </div>\n                </div>\n                <!-- =========== Dynamic Key Description Section End =================== -->\n                <div class=\"form-group\">\n                   <div class=\"row\">\n                      <label class=\"col-md-4 col-lg-2\">* {{\"Message Content\" | translate}}</label>\n                      <div class=\"col-md-8 col-lg-10\">\n                        <ckeditor [(ngModel)]=\"messageContent\"  id=\"messageContent\"\n                        #myckeditor=\"ngModel\"\n                        name=\"myckeditor\"\n                        required\n                        [config]=\"ckeConfig\" \n                        debounce=\"500\" \n                        >\n                       \n                        </ckeditor>\n                         <!-- <app-ckeditornew [ckdesc]=\"messageContent\" [(ngModel)]=\"messageContent\"></app-ckeditornew> -->\n                      </div>\n                   </div>\n                </div>\n             </div>\n          </div>\n \n          <div class=\"form-group\">\n             <div class=\"row\">\n                <label class=\"col-md-4 col-lg-2\"></label>\n                <div class=\"col-md-8 col-lg-10\" *ngIf=\"messageId == ''\">\n \n                   <button class=\"btn btn-primary\"\n                      (click)=\"newGenerateMessage()\">{{\"Submit\" | translate}}</button>\n                   <button class=\"btn btn-danger ml-1\" (click)=\"resetform()\">{{\"Reset\" | translate}}</button>\n                </div>\n                <div class=\"col-md-8 col-lg-10\" *ngIf=\"messageId\">\n \n                   <button class=\"btn btn-primary\"\n                      (click)=\"newGenerateMessage()\">{{\"Update\" | translate}}</button>\n                   <button class=\"btn btn-danger ml-1\" (click)=\"resetform()\">{{\"Cancel\" | translate}}</button>\n                </div>\n             </div>\n          </div>\n       </div>\n    </div>\n </div>\n", styles: [".files-list{display:flex;margin-bottom:.5rem;padding:.8rem 1rem;background:#f7f7f7;border-radius:2px;align-items:center;justify-content:space-between;border:1px solid #e1e1e1;cursor:pointer;word-break:break-all}.files-list i{font-size:1.3rem}.files-list:hover{background:#dedede}.custom-dropzone{margin-bottom:1rem}.btn-dropzone{height:auto}.custom-dropzone{height:auto;background:var(--bg-white);border:3px dashed var(--bs-gray-200);border-radius:5px;padding:.5rem}.custom-dropzone label{color:#fff;width:auto;border-radius:4px;background-color:var(--base-color-600);padding:.6rem 1.2rem;transition:all ease-in-out .5s}.custom-dropzone svg{fill:var(--bs-gray-200);margin-bottom:.5rem;height:40px}.ngx-dropzone-label{margin:0}.custom-dropzone h3{font-size:1rem;color:var(--bs-gray-400)}.custom-dropzone:hover label{background-color:var(--base-color-700)}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i1.ActivatedRoute }, { type: i2.HttpClient }, { type: i3.ValidatorchecklistService }, { type: i4.EncrypyDecrpyService }, { type: i5.MsgengineLibService }, { type: i6.VarlistService }]; }, propDecorators: { ckeditor: [{
                type: ViewChild,
                args: ["myckeditor"]
            }] } });
//# sourceMappingURL=data:application/json;base64,