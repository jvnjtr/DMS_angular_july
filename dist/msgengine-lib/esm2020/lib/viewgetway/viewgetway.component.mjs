import { Component, ViewChild } from '@angular/core';
import * as CryptoJS from 'crypto-js';
import { Buffer } from 'buffer';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/common/http";
import * as i3 from "../msgengine-lib.service";
import * as i4 from "../varlist.service";
import * as i5 from "@ng-bootstrap/ng-bootstrap";
import * as i6 from "../encrypy-decrpy.service";
import * as i7 from "@angular/common";
import * as i8 from "@angular/forms";
import * as i9 from "../libtabs/libtabs.component";
import * as i10 from "../libutils/libutils.component";
import * as i11 from "../libpagination/libpagination.component";
import * as i12 from "ngx-pagination";
import * as i13 from "../translate.pipe";
export class ViewgetwayComponent {
    constructor(route, httpClient, commonserveice, varlist, modalService, encDec) {
        this.route = route;
        this.httpClient = httpClient;
        this.commonserveice = commonserveice;
        this.varlist = varlist;
        this.modalService = modalService;
        this.encDec = encDec;
        this.jsonurl = [
            {
                "pagetitle": "View Gateway Config",
                "tabList": [
                    { "tabName": "Add", "tabUrl": "../addgateway" },
                    { "tabName": "View", "tabUrl": "../viewgateway", "tabClass": "active" }
                ],
                "utils": [
                    { "utilName": "search" },
                    { "utilName": "print" },
                    { "utilName": "delete" },
                    { "utilName": "publish" },
                    { "utilName": "unpublish" }
                ],
                "messages": {
                    "successMsg": "Date saved successfully",
                    "errorMsg": "Error in database",
                    "warningtype": "You want to delete this record",
                    "deleteMsg": "Record has been deleted"
                }
            }
        ];
        this.selType = 0;
        this.txtName = '';
        this.page = 1;
        this.count = 0;
        this.tableSize = 10;
        this.pageSizes = [10, 20, 50, 100, 500, 1000];
        this.getwayIdArray = [];
        this.pubUnpStatus = [];
        this.chkAll = 0;
        this.sevName = " ";
        this.langKey = 'en';
        this.indexNumber = 0;
        this.sevName = varlist.serviceName;
    }
    ngOnInit() {
        this.loadvarlist();
        this.getGetwaytypes();
        this.viewAllrecrds(this.selType, this.txtName);
        // console.log(this.viewAllrecrds());
        //this.addChangeEventForLabel();
    }
    loadvarlist() {
        // this.httpClient.get<any>(this.jsonurl).subscribe((data: any) => {
        this.tablist = this.jsonurl[0].tabList;
        this.utillist = this.jsonurl[0].utils;
        this.messaageslist = this.jsonurl[0].messages;
        this.title = this.jsonurl[0].pagetitle;
        // })
    }
    multilingual(test) {
        return test;
    }
    //\\ ======================== // Get getway types // ======================== //\\ 
    getGetwaytypes() {
        let getwayparm = {};
        this.commonserveice.viewGatwayTypes(getwayparm).subscribe({
            next: (response) => {
                let respData = response.RESPONSE_DATA;
                let respToken = response.RESPONSE_TOKEN;
                let verifyToken = CryptoJS.HmacSHA256(respData, this.varlist.apiHashingKey).toString();
                if (respToken == verifyToken) {
                    let res = Buffer.from(respData, 'base64');
                    res = JSON.parse(res.toString());
                    if (res.status == "200") {
                        this.getwaytypes = res.result;
                    }
                    else if (res.status == 501) {
                        this.commonserveice.directlogoutlib();
                    }
                    else {
                        console.log(res.messages);
                    }
                }
                else {
                    //this.loading=false;
                    this.commonserveice.swalfire('error', this.commonserveice.langReplace(this.varlist.somethingWrong));
                }
            },
            error: (msg) => {
                this.commonserveice.directlogoutlib();
            }
        });
    }
    //\\ ======================== // Get getway types // ======================== //\\ 
    onTableDataChange(event) {
        this.page = event;
        this.indexNumber = (this.page - 1) * this.tableSize;
    }
    onTableSizeChange(event) {
        this.tableSize = event.target.value;
        this.page = 1;
        this.indexNumber = 0;
    }
    //\\ ======================== // View All records // ======================== //\\ 
    viewAllrecrds(typeid, name) {
        // getGetwayType
        this.selType = 0;
        this.txtName = '';
        let formParams = {
            "typeId": typeid,
            "formName": name
        };
        this.loading = true;
        this.pubUnpStatus = [];
        this.commonserveice.viewGetwayConfig(formParams).subscribe({
            next: (response) => {
                let respData = response.RESPONSE_DATA;
                let respToken = response.RESPONSE_TOKEN;
                let verifyToken = CryptoJS.HmacSHA256(respData, this.varlist.apiHashingKey).toString();
                if (respToken == verifyToken) {
                    let res = Buffer.from(respData, 'base64');
                    let responseResult = JSON.parse(res);
                    if (responseResult.status == 200) {
                        this.loading = false;
                        this.getwayList = responseResult.result;
                        // console.log(this.getwayList)
                    }
                    else if (responseResult.status == 501) {
                        this.commonserveice.directlogoutlib();
                    }
                    else {
                        this.loading = false;
                        this.commonserveice.swalfire('error', this.commonserveice.langReplace(this.varlist.somethingWrong));
                    }
                }
                else {
                    //this.loading=false;
                    this.commonserveice.swalfire('error', this.commonserveice.langReplace(this.varlist.somethingWrong));
                }
            },
            error: (msg) => {
                this.commonserveice.directlogoutlib();
            }
        });
    }
    // //\\ ======================== // View All records // ======================== //\\ 
    onChange(checkid, e, publishStatus) {
        let totalCheckbox = document.querySelectorAll('.rowCheck').length;
        let totalChecked = document.querySelectorAll('.rowCheck:checked').length;
        let parentcheck = document.querySelectorAll('.checkall');
        if (totalCheckbox == totalChecked) {
            parentcheck[0].checked = true;
        }
        else {
            parentcheck[0].checked = false;
        }
        if (e.target.checked) {
            if (!this.getwayIdArray.includes(checkid)) {
                this.getwayIdArray.push(checkid);
                this.pubUnpStatus.push({ 'letterId': checkid, 'publishUnpublisStatus': publishStatus });
            }
        }
        else {
            let index = this.getwayIdArray.indexOf(checkid);
            let indxAdd = 0;
            for (let mk of this.pubUnpStatus) {
                if (mk.letterId == checkid) {
                    this.pubUnpStatus.splice(indxAdd, 1);
                    break;
                }
                indxAdd++;
            }
            this.getwayIdArray.splice(index, 1);
        }
    }
    selectAll(e) {
        let allid = e.target.id;
        // alert(allid)
        let checkBoxes = document.querySelectorAll('.rowCheck');
        if (e.target.checked) {
            for (let i = 0; i < checkBoxes.length; i++) {
                let ids = checkBoxes[i].id;
                this.getwayIdArray.push(parseInt(ids));
                this.pubUnpStatus.push({ 'letterId': ids, 'publishUnpublisStatus': checkBoxes[i].getAttribute("pubstatus") });
                checkBoxes[i].checked = true;
            }
        }
        else {
            this.getwayIdArray = [];
            for (let i = 0; i < checkBoxes.length; i++) {
                checkBoxes[i].checked = false;
            }
            this.pubUnpStatus = [];
        }
    }
    // //\\ ======================== // Get old getway details // ======================== //\\
    filedata(intId, typeId, typeName) {
        this.open(this.previewModal);
        let formParams = {
            "typeId": typeId,
            "intId": intId
        };
        this.typeName = typeName;
        this.commonserveice.getPrevDetails(formParams).subscribe({
            next: (response) => {
                let respData = response.RESPONSE_DATA;
                let respToken = response.RESPONSE_TOKEN;
                let verifyToken = CryptoJS.HmacSHA256(respData, this.varlist.apiHashingKey).toString();
                if (respToken == verifyToken) {
                    let res = Buffer.from(respData, 'base64');
                    let responseResult = JSON.parse(res);
                    if (responseResult.status == 200) {
                        this.getwayDetails = responseResult.result.data;
                        // console.log(responseResult.result)
                        this.getDetailslist = responseResult.result.result;
                    }
                    else if (responseResult.status == 501) {
                        //this.commonserveice.directlogoutlib()
                    }
                    else {
                        this.commonserveice.swalfire('error', this.commonserveice.langReplace(this.varlist.somethingWrong));
                    }
                }
                else {
                    //this.loading=false;
                    this.commonserveice.swalfire('error', this.commonserveice.langReplace(this.varlist.somethingWrong));
                }
            },
            error: (msg) => {
                this.commonserveice.directlogoutlib();
            }
        });
    }
    //\\ ======================== // Get old getway details // ======================== //\\
    // addChangeEventForLabel() {
    //   let sessionUserLangtoken: any = sessionStorage.getItem('USER_LANGPREF');
    //   let sessionUserLang = JSON.parse(CryptoJS.AES.decrypt(sessionUserLangtoken, this.varlist.apiHashingKey).toString(CryptoJS.enc.Utf8));
    //   setTimeout(() => {
    //     this.langKey = sessionUserLang;
    //     let labelChangeEle: any = document.getElementById('languageListH');
    //     labelChangeEle.addEventListener('change', () => {
    //       this.langKey = labelChangeEle.value;
    //     });
    //   }, 1000);
    // }
    //\\ ======================== // Modal Open // ======================== //\\ 
    open(content) {
        this.modalService.open(content, { size: 'lg', backdrop: 'static', keyboard: false, ariaLabelledBy: 'modal-basic-title' }).result.then((result) => {
        }, (reason) => { });
    }
    //\\ ======================== // Modal Open // ======================== //\\ 
    closeModal() {
        this.modalService.dismissAll();
    }
}
ViewgetwayComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: ViewgetwayComponent, deps: [{ token: i1.Router }, { token: i2.HttpClient }, { token: i3.MsgengineLibService }, { token: i4.VarlistService }, { token: i5.NgbModal }, { token: i6.EncrypyDecrpyService }], target: i0.ɵɵFactoryTarget.Component });
ViewgetwayComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: ViewgetwayComponent, selector: "lib-viewgetway", viewQueries: [{ propertyName: "previewModal", first: true, predicate: ["previewModal"], descendants: true }], ngImport: i0, template: "<!--===Page Title===-->\n<div class=\"page-title\">\n\n    <h4>{{title | translate}}</h4>\n  </div>\n  <!--===Page Title===-->\n  <!--===controle section===-->\n  <div class=\"page-controls-section\" id=\"page-content\">\n    <div class=\"card\">\n      <div class=\"controls-section-header\">\n        <ul class=\"nav nav-tabs nav-fill\" role=\"tablist\">\n            <lib-libtabs *ngFor=\"let tablist of tablist\" [tabMessage]=\"tablist\"></lib-libtabs>\n    \n        </ul>\n        <div class=\"indicatorslist\">\n\n            <lib-libutils *ngFor=\"let utillist of utillist\" [childMessage]=\"utillist\" [sendIds]=\"getwayIdArray\"\n            [funType]=\"sevName\" [pubUnpubStatus]=\"pubUnpStatus\"  (callfunction)=\"viewAllrecrds(selType,txtName)\"\n            (callfunction2)='selectAll($event)'></lib-libutils>\n         \n         \n        </div>\n  \n      </div>\n      <div class=\"card-body\">\n  \n\n        <div class=\"controls-section\">\n  \n          <!-- Search Panel -->\n          <div class=\"search-container active\" id=\"search-container\">\n  \n            <div class=\"search-sec\">\n  \n              <div class=\"row\">\n  \n                <div class=\"col-12 col-md-3 col-lg-3\">\n                  <div class=\"form-group\">\n                    <select class=\"form-select\" [(ngModel)]=\"selType\">\n                      <option value=\"0\" >{{\"Select Gateway Type\" | translate}}</option>\n                      <option *ngFor=\"let gettype of getwaytypes; let i index\" [value]=\"gettype.typeId\">\n                        {{gettype.typeName}}</option>\n  \n                    </select>\n                  </div>\n                </div>\n  \n                <div class=\"col-12 col-md-3 col-lg-3\">\n                  <div class=\"form-group\">\n                    <input type=\"text\" class=\"form-control\" name=\"Form Name\" [(ngModel)]=\"txtName\"\n                      placeholder=\"{{'Enter Name' | translate}}\">\n                  </div>\n                </div>\n  \n  \n                <div class=\"col-12 col-md-3 col-lg-3\">\n                  <div class=\"form-group\">\n                    <button class=\"btn btn-primary\" (click)=\"viewAllrecrds(selType,txtName)\">{{\"Search\" | translate}} </button>\n                    <button class=\"btn btn-danger ml-1\" (click)=\"viewAllrecrds(0,'')\"> {{\"Reset\" | translate}}</button>\n                  </div>\n                </div>\n              </div>\n  \n  \n            </div>\n  \n  \n          </div>\n          <!-- Search Panel -->\n  \n          <div *ngIf=\"getwayList?.length > 0; else norecord\">\n  \n            <div class=\"d-flex justify-content-between mb-3\">\n              <div>\n                <ul class=\"legends\">\n                  <li>\n                    <span class=\"bg-success\"></span>{{\"Publish\" | translate}}\n                  </li>\n                  <li>\n                    <span class=\"bg-danger\"></span> {{\"Unpublish\" | translate}}\n                  </li>\n                </ul>\n              </div>\n              <div>\n  \n                <!-- {{\"Per Page\"}}:\n                <select (change)=\"onTableSizeChange($event)\">\n                  <option *ngFor=\"let size of pageSizes\" [ngValue]=\"size\">\n                    {{ size }}\n                  </option>\n                </select> -->\n  \n              </div>\n  \n            </div>\n  \n            <div class=\"table-responsive \" id=\"print-section\">\n                \n              <table data-toggle=\"table\" class=\"table table-bordered \">\n                <thead>\n                  <tr>\n                    <th scope=\"col\" class=\"noPrint\" style=\"width:25px\" valign=\"top\">\n                      <div class=\"form-check\">\n                        <input class=\"form-check-input checkall\" type=\"checkbox\" (change)=\"selectAll($event)\" id=\"checkall\"\n                          name=\"checkall\" value=\"checkall\">\n  \n                      </div>\n                    </th>\n                    <th scope=\"col\" style=\"width:50px\">{{\"Sl No\" | translate}}</th>\n                    <th scope=\"col\">{{\"Type\" | translate}}</th>\n                    <th scope=\"col\">{{\"Name\" | translate}}</th>\n  \n                    <th scope=\"col\">{{\"URL\" | translate}}</th>\n                    <th scope=\"col\" class=\"noPrint\" style=\"width:140px\">{{\"Action\" | translate}}</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let getways of getwayList| paginate\n                                                                      : {\n                                                                          itemsPerPage: tableSize,\n                                                                          currentPage: page,\n                                                                          totalItems: count\n                                                                        };\n                                                                  let i = index\">\n                    <td class=\"noPrint border-left-2\"\n                      [ngClass]=\"{'border-left-danger': getways.tinStatus == 0 , 'border-left-success': getways.tinStatus == 1 }\">\n                      <div class=\"form-check\">\n                        <input class=\"form-check-input rowCheck\" type=\"checkbox\"\n                          (change)=\"onChange(getways.intId, $event,getways.tinStatus)\"\n                          [attr.pubstatus]=\"getways.tinStatus\" name=\"{{getways.intId }}\" [id]=\"getways.intId\"\n                          [value]=\"getways.intId\">\n  \n                      </div>\n                    </td>\n                    <td>{{i+1+indexNumber}}</td>\n                    <td>{{getways.typeName}} </td>\n                    <td>{{getways.vchName}}</td>\n  \n                    <td>{{getways.vchUrl}}</td>\n                    <td class=\"noPrint\">\n                      <a class=\"text-info\"  (click)=\"filedata(getways.intId,getways.tinType,getways.typeName)\" >{{\"View\" | translate}}</a>\n                     \n              \n  \n                    </td>\n                  </tr>\n  \n  \n  \n  \n                </tbody>\n              </table>\n            </div>\n  \n\n            <!-- <lib-pagination [page]=\"page\" [count]=\"count\" [tableSize]=\"tableSize\" (callfunction)=\"onTableDataChange($event)\"></lib-pagination> -->\n            <lib-libpagination [page]=\"page\" [count]=\"count\" [tableSize]=\"tableSize\" (callfunction)=\"onTableDataChange($event)\"></lib-libpagination>\n            \n          </div>\n          <ng-template #norecord>\n            <h6 class=\"no-content\"> {{\"No Record Found\" | translate}}</h6>\n  \n          </ng-template>\n  \n  \n        </div>\n  \n      </div>\n  \n    </div>\n  \n  \n  \n  </div>\n  <ng-template #previewModal id=\"previewModal\" let-modal>\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title mb-0\" id=\"movetoFolderModalLabel\">\n        {{\"Gateway Details\" | translate}}\n      </h5>\n      <button\n        type=\"button\"\n        class=\"btn-close\"\n        (click)=\"closeModal()\"\n        aria-label=\"Close\"\n      ></button>\n    </div>\n\n\n\n    <div class=\"modal-body\">\n        <div *ngFor=\"let getways of getwayDetails\">\n            <div class=\"mb-3 row\">\n                <label class=\"col-sm-4 \">{{\"Type\" | translate}}</label>\n                <div class=\"col-sm-8\">\n                  : <label class=\"text-dark\">{{typeName}}</label>\n                </div>\n              </div>\n              <div class=\"mb-3 row\">\n                <label class=\"col-sm-4 \">{{\"Name\" | translate}}</label>\n                <div class=\"col-sm-8\">\n                  : <label class=\"text-dark\">{{getways.vchName}}</label>\n                </div>\n              </div>\n              <div class=\"mb-3 row\">\n                <label class=\"col-sm-4 \">{{\"Url\" | translate}}</label>\n                <div class=\"col-sm-8\">\n                  : <label class=\"text-dark\">{{getways.url}}</label>\n                </div>\n              </div>\n              <div class=\"mb-3 row\">\n                <label class=\"col-sm-4 \">{{\"Data post method\" | translate}}</label>\n                <div class=\"col-sm-8\">\n                  : <label class=\"text-dark\">{{getways.dataPostMethod}} </label>\n                </div>\n              </div>\n              <div class=\"mb-3 row\">\n                <label class=\"col-sm-4 \">{{\"Contact Address\" | translate}}</label>\n                <div class=\"col-sm-8\">\n                  : <label class=\"text-dark\">{{getways.contactaddress}}</label>\n                </div>\n              </div>\n        </div>\n       \n       \n        <table class=\"table table-bordered mt-3\">\n            <thead>\n              <tr>\n                <th scope=\"col\">{{\"Label\" | translate}}</th>\n                <th scope=\"col\">{{\"Key\" | translate}}</th>\n                <th scope=\"col\">{{\"Value\" | translate}}</th>\n\n              </tr>\n            </thead>\n            <tbody>\n\n              <tr *ngFor=\"let apilist of getDetailslist; let i = index\">\n                <td>{{apilist.vchLabel}}</td>\n                <td>{{apilist.vchKey}}</td>\n                <td>{{apilist.vchValue}}</td>\n              </tr>\n\n            </tbody>\n          </table>\n    </div>\n  </ng-template>", styles: [""], dependencies: [{ kind: "directive", type: i7.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i8.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i8.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i8.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i8.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i8.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i9.LibtabsComponent, selector: "lib-libtabs", inputs: ["tabMessage", "activeid"] }, { kind: "component", type: i10.LibutilsComponent, selector: "lib-libutils", inputs: ["childMessage", "sendIds", "funType", "pubUnpubStatus", "reloadUrl"], outputs: ["callfunction", "callfunction3"] }, { kind: "component", type: i11.LibpaginationComponent, selector: "lib-libpagination", inputs: ["page", "count", "tableSize"], outputs: ["callfunction"] }, { kind: "pipe", type: i12.PaginatePipe, name: "paginate" }, { kind: "pipe", type: i13.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: ViewgetwayComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-viewgetway', template: "<!--===Page Title===-->\n<div class=\"page-title\">\n\n    <h4>{{title | translate}}</h4>\n  </div>\n  <!--===Page Title===-->\n  <!--===controle section===-->\n  <div class=\"page-controls-section\" id=\"page-content\">\n    <div class=\"card\">\n      <div class=\"controls-section-header\">\n        <ul class=\"nav nav-tabs nav-fill\" role=\"tablist\">\n            <lib-libtabs *ngFor=\"let tablist of tablist\" [tabMessage]=\"tablist\"></lib-libtabs>\n    \n        </ul>\n        <div class=\"indicatorslist\">\n\n            <lib-libutils *ngFor=\"let utillist of utillist\" [childMessage]=\"utillist\" [sendIds]=\"getwayIdArray\"\n            [funType]=\"sevName\" [pubUnpubStatus]=\"pubUnpStatus\"  (callfunction)=\"viewAllrecrds(selType,txtName)\"\n            (callfunction2)='selectAll($event)'></lib-libutils>\n         \n         \n        </div>\n  \n      </div>\n      <div class=\"card-body\">\n  \n\n        <div class=\"controls-section\">\n  \n          <!-- Search Panel -->\n          <div class=\"search-container active\" id=\"search-container\">\n  \n            <div class=\"search-sec\">\n  \n              <div class=\"row\">\n  \n                <div class=\"col-12 col-md-3 col-lg-3\">\n                  <div class=\"form-group\">\n                    <select class=\"form-select\" [(ngModel)]=\"selType\">\n                      <option value=\"0\" >{{\"Select Gateway Type\" | translate}}</option>\n                      <option *ngFor=\"let gettype of getwaytypes; let i index\" [value]=\"gettype.typeId\">\n                        {{gettype.typeName}}</option>\n  \n                    </select>\n                  </div>\n                </div>\n  \n                <div class=\"col-12 col-md-3 col-lg-3\">\n                  <div class=\"form-group\">\n                    <input type=\"text\" class=\"form-control\" name=\"Form Name\" [(ngModel)]=\"txtName\"\n                      placeholder=\"{{'Enter Name' | translate}}\">\n                  </div>\n                </div>\n  \n  \n                <div class=\"col-12 col-md-3 col-lg-3\">\n                  <div class=\"form-group\">\n                    <button class=\"btn btn-primary\" (click)=\"viewAllrecrds(selType,txtName)\">{{\"Search\" | translate}} </button>\n                    <button class=\"btn btn-danger ml-1\" (click)=\"viewAllrecrds(0,'')\"> {{\"Reset\" | translate}}</button>\n                  </div>\n                </div>\n              </div>\n  \n  \n            </div>\n  \n  \n          </div>\n          <!-- Search Panel -->\n  \n          <div *ngIf=\"getwayList?.length > 0; else norecord\">\n  \n            <div class=\"d-flex justify-content-between mb-3\">\n              <div>\n                <ul class=\"legends\">\n                  <li>\n                    <span class=\"bg-success\"></span>{{\"Publish\" | translate}}\n                  </li>\n                  <li>\n                    <span class=\"bg-danger\"></span> {{\"Unpublish\" | translate}}\n                  </li>\n                </ul>\n              </div>\n              <div>\n  \n                <!-- {{\"Per Page\"}}:\n                <select (change)=\"onTableSizeChange($event)\">\n                  <option *ngFor=\"let size of pageSizes\" [ngValue]=\"size\">\n                    {{ size }}\n                  </option>\n                </select> -->\n  \n              </div>\n  \n            </div>\n  \n            <div class=\"table-responsive \" id=\"print-section\">\n                \n              <table data-toggle=\"table\" class=\"table table-bordered \">\n                <thead>\n                  <tr>\n                    <th scope=\"col\" class=\"noPrint\" style=\"width:25px\" valign=\"top\">\n                      <div class=\"form-check\">\n                        <input class=\"form-check-input checkall\" type=\"checkbox\" (change)=\"selectAll($event)\" id=\"checkall\"\n                          name=\"checkall\" value=\"checkall\">\n  \n                      </div>\n                    </th>\n                    <th scope=\"col\" style=\"width:50px\">{{\"Sl No\" | translate}}</th>\n                    <th scope=\"col\">{{\"Type\" | translate}}</th>\n                    <th scope=\"col\">{{\"Name\" | translate}}</th>\n  \n                    <th scope=\"col\">{{\"URL\" | translate}}</th>\n                    <th scope=\"col\" class=\"noPrint\" style=\"width:140px\">{{\"Action\" | translate}}</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let getways of getwayList| paginate\n                                                                      : {\n                                                                          itemsPerPage: tableSize,\n                                                                          currentPage: page,\n                                                                          totalItems: count\n                                                                        };\n                                                                  let i = index\">\n                    <td class=\"noPrint border-left-2\"\n                      [ngClass]=\"{'border-left-danger': getways.tinStatus == 0 , 'border-left-success': getways.tinStatus == 1 }\">\n                      <div class=\"form-check\">\n                        <input class=\"form-check-input rowCheck\" type=\"checkbox\"\n                          (change)=\"onChange(getways.intId, $event,getways.tinStatus)\"\n                          [attr.pubstatus]=\"getways.tinStatus\" name=\"{{getways.intId }}\" [id]=\"getways.intId\"\n                          [value]=\"getways.intId\">\n  \n                      </div>\n                    </td>\n                    <td>{{i+1+indexNumber}}</td>\n                    <td>{{getways.typeName}} </td>\n                    <td>{{getways.vchName}}</td>\n  \n                    <td>{{getways.vchUrl}}</td>\n                    <td class=\"noPrint\">\n                      <a class=\"text-info\"  (click)=\"filedata(getways.intId,getways.tinType,getways.typeName)\" >{{\"View\" | translate}}</a>\n                     \n              \n  \n                    </td>\n                  </tr>\n  \n  \n  \n  \n                </tbody>\n              </table>\n            </div>\n  \n\n            <!-- <lib-pagination [page]=\"page\" [count]=\"count\" [tableSize]=\"tableSize\" (callfunction)=\"onTableDataChange($event)\"></lib-pagination> -->\n            <lib-libpagination [page]=\"page\" [count]=\"count\" [tableSize]=\"tableSize\" (callfunction)=\"onTableDataChange($event)\"></lib-libpagination>\n            \n          </div>\n          <ng-template #norecord>\n            <h6 class=\"no-content\"> {{\"No Record Found\" | translate}}</h6>\n  \n          </ng-template>\n  \n  \n        </div>\n  \n      </div>\n  \n    </div>\n  \n  \n  \n  </div>\n  <ng-template #previewModal id=\"previewModal\" let-modal>\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title mb-0\" id=\"movetoFolderModalLabel\">\n        {{\"Gateway Details\" | translate}}\n      </h5>\n      <button\n        type=\"button\"\n        class=\"btn-close\"\n        (click)=\"closeModal()\"\n        aria-label=\"Close\"\n      ></button>\n    </div>\n\n\n\n    <div class=\"modal-body\">\n        <div *ngFor=\"let getways of getwayDetails\">\n            <div class=\"mb-3 row\">\n                <label class=\"col-sm-4 \">{{\"Type\" | translate}}</label>\n                <div class=\"col-sm-8\">\n                  : <label class=\"text-dark\">{{typeName}}</label>\n                </div>\n              </div>\n              <div class=\"mb-3 row\">\n                <label class=\"col-sm-4 \">{{\"Name\" | translate}}</label>\n                <div class=\"col-sm-8\">\n                  : <label class=\"text-dark\">{{getways.vchName}}</label>\n                </div>\n              </div>\n              <div class=\"mb-3 row\">\n                <label class=\"col-sm-4 \">{{\"Url\" | translate}}</label>\n                <div class=\"col-sm-8\">\n                  : <label class=\"text-dark\">{{getways.url}}</label>\n                </div>\n              </div>\n              <div class=\"mb-3 row\">\n                <label class=\"col-sm-4 \">{{\"Data post method\" | translate}}</label>\n                <div class=\"col-sm-8\">\n                  : <label class=\"text-dark\">{{getways.dataPostMethod}} </label>\n                </div>\n              </div>\n              <div class=\"mb-3 row\">\n                <label class=\"col-sm-4 \">{{\"Contact Address\" | translate}}</label>\n                <div class=\"col-sm-8\">\n                  : <label class=\"text-dark\">{{getways.contactaddress}}</label>\n                </div>\n              </div>\n        </div>\n       \n       \n        <table class=\"table table-bordered mt-3\">\n            <thead>\n              <tr>\n                <th scope=\"col\">{{\"Label\" | translate}}</th>\n                <th scope=\"col\">{{\"Key\" | translate}}</th>\n                <th scope=\"col\">{{\"Value\" | translate}}</th>\n\n              </tr>\n            </thead>\n            <tbody>\n\n              <tr *ngFor=\"let apilist of getDetailslist; let i = index\">\n                <td>{{apilist.vchLabel}}</td>\n                <td>{{apilist.vchKey}}</td>\n                <td>{{apilist.vchValue}}</td>\n              </tr>\n\n            </tbody>\n          </table>\n    </div>\n  </ng-template>" }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.HttpClient }, { type: i3.MsgengineLibService }, { type: i4.VarlistService }, { type: i5.NgbModal }, { type: i6.EncrypyDecrpyService }]; }, propDecorators: { previewModal: [{
                type: ViewChild,
                args: ['previewModal']
            }] } });
//# sourceMappingURL=data:application/json;base64,