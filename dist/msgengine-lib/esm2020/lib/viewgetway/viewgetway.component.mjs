import { Component, ViewChild } from '@angular/core';
import * as CryptoJS from 'crypto-js';
import { Buffer } from 'buffer';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/common/http";
import * as i3 from "../msgengine-lib.service";
import * as i4 from "../varlist.service";
import * as i5 from "@ng-bootstrap/ng-bootstrap";
import * as i6 from "../encrypy-decrpy.service";
import * as i7 from "@angular/common";
import * as i8 from "@angular/forms";
import * as i9 from "../libtabs/libtabs.component";
import * as i10 from "../libutils/libutils.component";
import * as i11 from "../libpagination/libpagination.component";
import * as i12 from "ngx-pagination";
import * as i13 from "../translate.pipe";
export class ViewgetwayComponent {
    constructor(route, httpClient, commonserveice, varlist, modalService, encDec) {
        this.route = route;
        this.httpClient = httpClient;
        this.commonserveice = commonserveice;
        this.varlist = varlist;
        this.modalService = modalService;
        this.encDec = encDec;
        this.jsonurl = [
            {
                "pagetitle": "View Gateway Config",
                "tabList": [
                    { "tabName": "Add", "tabUrl": "../addgateway" },
                    { "tabName": "View", "tabUrl": "../viewgateway", "tabClass": "active" }
                ],
                "utils": [
                    { "utilName": "search" },
                    { "utilName": "print" },
                    { "utilName": "delete" },
                    { "utilName": "publish" },
                    { "utilName": "unpublish" }
                ],
                "messages": {
                    "successMsg": "Date saved successfully",
                    "errorMsg": "Error in database",
                    "warningtype": "You want to delete this record",
                    "deleteMsg": "Record has been deleted"
                }
            }
        ];
        this.selType = 0;
        this.txtName = '';
        this.page = 1;
        this.count = 0;
        this.tableSize = 10;
        this.pageSizes = [10, 20, 50, 100, 500, 1000];
        this.getwayIdArray = [];
        this.pubUnpStatus = [];
        this.chkAll = 0;
        this.sevName = " ";
        this.langKey = 'en';
        this.indexNumber = 0;
        this.sevName = varlist.serviceName;
    }
    ngOnInit() {
        this.loadvarlist();
        this.getGetwaytypes();
        this.viewAllrecrds(this.selType, this.txtName);
        // console.log(this.viewAllrecrds());
        //this.addChangeEventForLabel();
    }
    loadvarlist() {
        // this.httpClient.get<any>(this.jsonurl).subscribe((data: any) => {
        this.tablist = this.jsonurl[0].tabList;
        this.utillist = this.jsonurl[0].utils;
        this.messaageslist = this.jsonurl[0].messages;
        this.title = this.jsonurl[0].pagetitle;
        // })
    }
    multilingual(test) {
        return test;
    }
    //\\ ======================== // Get getway types // ======================== //\\ 
    getGetwaytypes() {
        let getwayparm = {};
        this.commonserveice.viewGatwayTypes(getwayparm).subscribe({
            next: (response) => {
                let respData = response.RESPONSE_DATA;
                let respToken = response.RESPONSE_TOKEN;
                let verifyToken = CryptoJS.HmacSHA256(respData, this.varlist.apiHashingKey).toString();
                if (respToken == verifyToken) {
                    let res = Buffer.from(respData, 'base64');
                    res = JSON.parse(res.toString());
                    if (res.status == "200") {
                        this.getwaytypes = res.result;
                    }
                    else if (res.status == 501) {
                        this.commonserveice.directlogoutlib();
                    }
                    else {
                        console.log(res.messages);
                    }
                }
                else {
                    //this.loading=false;
                    this.commonserveice.swalfire('error', this.commonserveice.langReplace(this.varlist.somethingWrong));
                }
            },
            error: (msg) => {
                this.commonserveice.directlogoutlib();
            }
        });
    }
    //\\ ======================== // Get getway types // ======================== //\\ 
    onTableDataChange(event) {
        this.page = event;
        this.indexNumber = (this.page - 1) * this.tableSize;
    }
    onTableSizeChange(event) {
        this.tableSize = event.target.value;
        this.page = 1;
        this.indexNumber = 0;
    }
    //\\ ======================== // View All records // ======================== //\\ 
    viewAllrecrds(typeid, name) {
        // getGetwayType
        this.selType = 0;
        this.txtName = '';
        let formParams = {
            "typeId": typeid,
            "formName": name
        };
        this.loading = true;
        this.pubUnpStatus = [];
        this.commonserveice.viewGetwayConfig(formParams).subscribe({
            next: (response) => {
                let respData = response.RESPONSE_DATA;
                let respToken = response.RESPONSE_TOKEN;
                let verifyToken = CryptoJS.HmacSHA256(respData, this.varlist.apiHashingKey).toString();
                if (respToken == verifyToken) {
                    let res = Buffer.from(respData, 'base64');
                    let responseResult = JSON.parse(res);
                    if (responseResult.status == 200) {
                        this.loading = false;
                        this.getwayList = responseResult.result;
                        // console.log(this.getwayList)
                    }
                    else if (responseResult.status == 501) {
                        this.commonserveice.directlogoutlib();
                    }
                    else {
                        this.loading = false;
                        this.commonserveice.swalfire('error', this.commonserveice.langReplace(this.varlist.somethingWrong));
                    }
                }
                else {
                    //this.loading=false;
                    this.commonserveice.swalfire('error', this.commonserveice.langReplace(this.varlist.somethingWrong));
                }
            },
            error: (msg) => {
                this.commonserveice.directlogoutlib();
            }
        });
    }
    // //\\ ======================== // View All records // ======================== //\\ 
    onChange(checkid, e, publishStatus) {
        let totalCheckbox = document.querySelectorAll('.rowCheck').length;
        let totalChecked = document.querySelectorAll('.rowCheck:checked').length;
        let parentcheck = document.querySelectorAll('.checkall');
        if (totalCheckbox == totalChecked) {
            parentcheck[0].checked = true;
        }
        else {
            parentcheck[0].checked = false;
        }
        if (e.target.checked) {
            if (!this.getwayIdArray.includes(checkid)) {
                this.getwayIdArray.push(checkid);
                this.pubUnpStatus.push({ 'letterId': checkid, 'publishUnpublisStatus': publishStatus });
            }
        }
        else {
            let index = this.getwayIdArray.indexOf(checkid);
            let indxAdd = 0;
            for (let mk of this.pubUnpStatus) {
                if (mk.letterId == checkid) {
                    this.pubUnpStatus.splice(indxAdd, 1);
                    break;
                }
                indxAdd++;
            }
            this.getwayIdArray.splice(index, 1);
        }
    }
    selectAll(e) {
        let allid = e.target.id;
        // alert(allid)
        let checkBoxes = document.querySelectorAll('.rowCheck');
        if (e.target.checked) {
            for (let i = 0; i < checkBoxes.length; i++) {
                let ids = checkBoxes[i].id;
                this.getwayIdArray.push(parseInt(ids));
                this.pubUnpStatus.push({ 'letterId': ids, 'publishUnpublisStatus': checkBoxes[i].getAttribute("pubstatus") });
                checkBoxes[i].checked = true;
            }
        }
        else {
            this.getwayIdArray = [];
            for (let i = 0; i < checkBoxes.length; i++) {
                checkBoxes[i].checked = false;
            }
            this.pubUnpStatus = [];
        }
    }
    // //\\ ======================== // Get old getway details // ======================== //\\
    filedata(intId, typeId, typeName) {
        this.open(this.previewModal);
        let formParams = {
            "typeId": typeId,
            "intId": intId
        };
        this.typeName = typeName;
        this.commonserveice.getPrevDetails(formParams).subscribe({
            next: (response) => {
                let respData = response.RESPONSE_DATA;
                let respToken = response.RESPONSE_TOKEN;
                let verifyToken = CryptoJS.HmacSHA256(respData, this.varlist.apiHashingKey).toString();
                if (respToken == verifyToken) {
                    let res = Buffer.from(respData, 'base64');
                    let responseResult = JSON.parse(res);
                    if (responseResult.status == 200) {
                        this.getwayDetails = responseResult.result.data;
                        // console.log(responseResult.result)
                        this.getDetailslist = responseResult.result.result;
                    }
                    else if (responseResult.status == 501) {
                        //this.commonserveice.directlogoutlib()
                    }
                    else {
                        this.commonserveice.swalfire('error', this.commonserveice.langReplace(this.varlist.somethingWrong));
                    }
                }
                else {
                    //this.loading=false;
                    this.commonserveice.swalfire('error', this.commonserveice.langReplace(this.varlist.somethingWrong));
                }
            },
            error: (msg) => {
                this.commonserveice.directlogoutlib();
            }
        });
    }
    //\\ ======================== // Get old getway details // ======================== //\\
    // addChangeEventForLabel() {
    //   let sessionUserLangtoken: any = sessionStorage.getItem('USER_LANGPREF');
    //   let sessionUserLang = JSON.parse(CryptoJS.AES.decrypt(sessionUserLangtoken, this.varlist.apiHashingKey).toString(CryptoJS.enc.Utf8));
    //   setTimeout(() => {
    //     this.langKey = sessionUserLang;
    //     let labelChangeEle: any = document.getElementById('languageListH');
    //     labelChangeEle.addEventListener('change', () => {
    //       this.langKey = labelChangeEle.value;
    //     });
    //   }, 1000);
    // }
    //\\ ======================== // Modal Open // ======================== //\\ 
    open(content) {
        this.modalService.open(content, { size: 'lg', backdrop: 'static', keyboard: false, ariaLabelledBy: 'modal-basic-title' }).result.then((result) => {
        }, (reason) => { });
    }
    //\\ ======================== // Modal Open // ======================== //\\ 
    closeModal() {
        this.modalService.dismissAll();
    }
}
ViewgetwayComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: ViewgetwayComponent, deps: [{ token: i1.Router }, { token: i2.HttpClient }, { token: i3.MsgengineLibService }, { token: i4.VarlistService }, { token: i5.NgbModal }, { token: i6.EncrypyDecrpyService }], target: i0.ɵɵFactoryTarget.Component });
ViewgetwayComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: ViewgetwayComponent, selector: "lib-viewgetway", viewQueries: [{ propertyName: "previewModal", first: true, predicate: ["previewModal"], descendants: true }], ngImport: i0, template: "<!--===Page Title===-->\r\n<div class=\"page-title\">\r\n\r\n    <h4>{{title | translate}}</h4>\r\n  </div>\r\n  <!--===Page Title===-->\r\n  <!--===controle section===-->\r\n  <div class=\"page-controls-section\" id=\"page-content\">\r\n    <div class=\"card\">\r\n      <div class=\"controls-section-header\">\r\n        <ul class=\"nav nav-tabs nav-fill\" role=\"tablist\">\r\n            <lib-libtabs *ngFor=\"let tablist of tablist\" [tabMessage]=\"tablist\"></lib-libtabs>\r\n    \r\n        </ul>\r\n        <div class=\"indicatorslist\">\r\n\r\n            <lib-libutils *ngFor=\"let utillist of utillist\" [childMessage]=\"utillist\" [sendIds]=\"getwayIdArray\"\r\n            [funType]=\"sevName\" [pubUnpubStatus]=\"pubUnpStatus\"  (callfunction)=\"viewAllrecrds(selType,txtName)\"\r\n            (callfunction2)='selectAll($event)'></lib-libutils>\r\n         \r\n         \r\n        </div>\r\n  \r\n      </div>\r\n      <div class=\"card-body\">\r\n  \r\n\r\n        <div class=\"controls-section\">\r\n  \r\n          <!-- Search Panel -->\r\n          <div class=\"search-container active\" id=\"search-container\">\r\n  \r\n            <div class=\"search-sec\">\r\n  \r\n              <div class=\"row\">\r\n  \r\n                <div class=\"col-12 col-md-3 col-lg-3\">\r\n                  <div class=\"form-group\">\r\n                    <select class=\"form-select\" [(ngModel)]=\"selType\">\r\n                      <option value=\"0\" >{{\"Select Gateway Type\" | translate}}</option>\r\n                      <option *ngFor=\"let gettype of getwaytypes; let i index\" [value]=\"gettype.typeId\">\r\n                        {{gettype.typeName}}</option>\r\n  \r\n                    </select>\r\n                  </div>\r\n                </div>\r\n  \r\n                <div class=\"col-12 col-md-3 col-lg-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" class=\"form-control\" name=\"Form Name\" [(ngModel)]=\"txtName\"\r\n                      placeholder=\"{{'Enter Name' | translate}}\">\r\n                  </div>\r\n                </div>\r\n  \r\n  \r\n                <div class=\"col-12 col-md-3 col-lg-3\">\r\n                  <div class=\"form-group\">\r\n                    <button class=\"btn btn-primary\" (click)=\"viewAllrecrds(selType,txtName)\">{{\"Search\" | translate}} </button>\r\n                    <button class=\"btn btn-danger ml-1\" (click)=\"viewAllrecrds(0,'')\"> {{\"Reset\" | translate}}</button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n  \r\n  \r\n            </div>\r\n  \r\n  \r\n          </div>\r\n          <!-- Search Panel -->\r\n  \r\n          <div *ngIf=\"getwayList?.length > 0; else norecord\">\r\n  \r\n            <div class=\"d-flex justify-content-between mb-3\">\r\n              <div>\r\n                <ul class=\"legends\">\r\n                  <li>\r\n                    <span class=\"bg-success\"></span>{{\"Publish\" | translate}}\r\n                  </li>\r\n                  <li>\r\n                    <span class=\"bg-danger\"></span> {{\"Unpublish\" | translate}}\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <div>\r\n  \r\n                <!-- {{\"Per Page\"}}:\r\n                <select (change)=\"onTableSizeChange($event)\">\r\n                  <option *ngFor=\"let size of pageSizes\" [ngValue]=\"size\">\r\n                    {{ size }}\r\n                  </option>\r\n                </select> -->\r\n  \r\n              </div>\r\n  \r\n            </div>\r\n  \r\n            <div class=\"table-responsive \" id=\"print-section\">\r\n                \r\n              <table data-toggle=\"table\" class=\"table table-bordered \">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\" class=\"noPrint\" style=\"width:25px\" valign=\"top\">\r\n                      <div class=\"form-check\">\r\n                        <input class=\"form-check-input checkall\" type=\"checkbox\" (change)=\"selectAll($event)\" id=\"checkall\"\r\n                          name=\"checkall\" value=\"checkall\">\r\n  \r\n                      </div>\r\n                    </th>\r\n                    <th scope=\"col\" style=\"width:50px\">{{\"Sl No.\" | translate}}</th>\r\n                    <th scope=\"col\">{{\"Type\" | translate}}</th>\r\n                    <th scope=\"col\">{{\"Name\" | translate}}</th>\r\n  \r\n                    <th scope=\"col\">{{\"URL\" | translate}}</th>\r\n                    <th scope=\"col\" class=\"noPrint\" style=\"width:140px\">{{\"Action\" | translate}}</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr *ngFor=\"let getways of getwayList| paginate\r\n                                                                      : {\r\n                                                                          itemsPerPage: tableSize,\r\n                                                                          currentPage: page,\r\n                                                                          totalItems: count\r\n                                                                        };\r\n                                                                  let i = index\">\r\n                    <td class=\"noPrint border-left-2\"\r\n                      [ngClass]=\"{'border-left-danger': getways.tinStatus == 0 , 'border-left-success': getways.tinStatus == 1 }\">\r\n                      <div class=\"form-check\">\r\n                        <input class=\"form-check-input rowCheck\" type=\"checkbox\"\r\n                          (change)=\"onChange(getways.intId, $event,getways.tinStatus)\"\r\n                          [attr.pubstatus]=\"getways.tinStatus\" name=\"{{getways.intId }}\" [id]=\"getways.intId\"\r\n                          [value]=\"getways.intId\">\r\n  \r\n                      </div>\r\n                    </td>\r\n                    <td>{{i+1+indexNumber}}</td>\r\n                    <td>{{getways.typeName}} </td>\r\n                    <td>{{getways.vchName}}</td>\r\n  \r\n                    <td>{{getways.vchUrl}}</td>\r\n                    <td class=\"noPrint\">\r\n                      <a class=\"text-info\"  (click)=\"filedata(getways.intId,getways.tinType,getways.typeName)\" >{{\"View\" | translate}}</a>\r\n                     \r\n              \r\n  \r\n                    </td>\r\n                  </tr>\r\n  \r\n  \r\n  \r\n  \r\n                </tbody>\r\n              </table>\r\n            </div>\r\n  \r\n\r\n            <!-- <lib-pagination [page]=\"page\" [count]=\"count\" [tableSize]=\"tableSize\" (callfunction)=\"onTableDataChange($event)\"></lib-pagination> -->\r\n            <lib-libpagination [page]=\"page\" [count]=\"count\" [tableSize]=\"tableSize\" (callfunction)=\"onTableDataChange($event)\"></lib-libpagination>\r\n            \r\n          </div>\r\n          <ng-template #norecord>\r\n            <h6 class=\"no-content\"> {{\"No Record Found\" | translate}}</h6>\r\n  \r\n          </ng-template>\r\n  \r\n  \r\n        </div>\r\n  \r\n      </div>\r\n  \r\n    </div>\r\n  \r\n  \r\n  \r\n  </div>\r\n  <ng-template #previewModal id=\"previewModal\" let-modal>\r\n    <div class=\"modal-header\">\r\n      <h5 class=\"modal-title mb-0\" id=\"movetoFolderModalLabel\">\r\n        {{\"Gateway Details\" | translate}}\r\n      </h5>\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn-close\"\r\n        (click)=\"closeModal()\"\r\n        aria-label=\"Close\"\r\n      ></button>\r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"modal-body\">\r\n        <div *ngFor=\"let getways of getwayDetails\">\r\n            <div class=\"mb-3 row\">\r\n                <label class=\"col-sm-4 \">{{\"Type\" | translate}}</label>\r\n                <div class=\"col-sm-8\">\r\n                  : <label class=\"text-dark\">{{typeName}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3 row\">\r\n                <label class=\"col-sm-4 \">{{\"Name\" | translate}}</label>\r\n                <div class=\"col-sm-8\">\r\n                  : <label class=\"text-dark\">{{getways.vchName}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3 row\">\r\n                <label class=\"col-sm-4 \">{{\"Url\" | translate}}</label>\r\n                <div class=\"col-sm-8\">\r\n                  : <label class=\"text-dark\">{{getways.url}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3 row\">\r\n                <label class=\"col-sm-4 \">{{\"Data post method\" | translate}}</label>\r\n                <div class=\"col-sm-8\">\r\n                  : <label class=\"text-dark\">{{getways.dataPostMethod}} </label>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3 row\">\r\n                <label class=\"col-sm-4 \">{{\"Contact Address\" | translate}}</label>\r\n                <div class=\"col-sm-8\">\r\n                  : <label class=\"text-dark\">{{getways.contactaddress}}</label>\r\n                </div>\r\n              </div>\r\n        </div>\r\n       \r\n       \r\n        <table class=\"table table-bordered mt-3\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">{{\"Label\" | translate}}</th>\r\n                <th scope=\"col\">{{\"Key\" | translate}}</th>\r\n                <th scope=\"col\">{{\"Value\" | translate}}</th>\r\n\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n\r\n              <tr *ngFor=\"let apilist of getDetailslist; let i = index\">\r\n                <td>{{apilist.vchLabel}}</td>\r\n                <td>{{apilist.vchKey}}</td>\r\n                <td>{{apilist.vchValue}}</td>\r\n              </tr>\r\n\r\n            </tbody>\r\n          </table>\r\n    </div>\r\n  </ng-template>", styles: [""], dependencies: [{ kind: "directive", type: i7.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i8.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i8.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i8.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i8.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i8.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i9.LibtabsComponent, selector: "lib-libtabs", inputs: ["tabMessage", "activeid"] }, { kind: "component", type: i10.LibutilsComponent, selector: "lib-libutils", inputs: ["childMessage", "sendIds", "funType", "pubUnpubStatus", "reloadUrl"], outputs: ["callfunction", "callfunction3"] }, { kind: "component", type: i11.LibpaginationComponent, selector: "lib-libpagination", inputs: ["page", "count", "tableSize"], outputs: ["callfunction"] }, { kind: "pipe", type: i12.PaginatePipe, name: "paginate" }, { kind: "pipe", type: i13.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: ViewgetwayComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-viewgetway', template: "<!--===Page Title===-->\r\n<div class=\"page-title\">\r\n\r\n    <h4>{{title | translate}}</h4>\r\n  </div>\r\n  <!--===Page Title===-->\r\n  <!--===controle section===-->\r\n  <div class=\"page-controls-section\" id=\"page-content\">\r\n    <div class=\"card\">\r\n      <div class=\"controls-section-header\">\r\n        <ul class=\"nav nav-tabs nav-fill\" role=\"tablist\">\r\n            <lib-libtabs *ngFor=\"let tablist of tablist\" [tabMessage]=\"tablist\"></lib-libtabs>\r\n    \r\n        </ul>\r\n        <div class=\"indicatorslist\">\r\n\r\n            <lib-libutils *ngFor=\"let utillist of utillist\" [childMessage]=\"utillist\" [sendIds]=\"getwayIdArray\"\r\n            [funType]=\"sevName\" [pubUnpubStatus]=\"pubUnpStatus\"  (callfunction)=\"viewAllrecrds(selType,txtName)\"\r\n            (callfunction2)='selectAll($event)'></lib-libutils>\r\n         \r\n         \r\n        </div>\r\n  \r\n      </div>\r\n      <div class=\"card-body\">\r\n  \r\n\r\n        <div class=\"controls-section\">\r\n  \r\n          <!-- Search Panel -->\r\n          <div class=\"search-container active\" id=\"search-container\">\r\n  \r\n            <div class=\"search-sec\">\r\n  \r\n              <div class=\"row\">\r\n  \r\n                <div class=\"col-12 col-md-3 col-lg-3\">\r\n                  <div class=\"form-group\">\r\n                    <select class=\"form-select\" [(ngModel)]=\"selType\">\r\n                      <option value=\"0\" >{{\"Select Gateway Type\" | translate}}</option>\r\n                      <option *ngFor=\"let gettype of getwaytypes; let i index\" [value]=\"gettype.typeId\">\r\n                        {{gettype.typeName}}</option>\r\n  \r\n                    </select>\r\n                  </div>\r\n                </div>\r\n  \r\n                <div class=\"col-12 col-md-3 col-lg-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" class=\"form-control\" name=\"Form Name\" [(ngModel)]=\"txtName\"\r\n                      placeholder=\"{{'Enter Name' | translate}}\">\r\n                  </div>\r\n                </div>\r\n  \r\n  \r\n                <div class=\"col-12 col-md-3 col-lg-3\">\r\n                  <div class=\"form-group\">\r\n                    <button class=\"btn btn-primary\" (click)=\"viewAllrecrds(selType,txtName)\">{{\"Search\" | translate}} </button>\r\n                    <button class=\"btn btn-danger ml-1\" (click)=\"viewAllrecrds(0,'')\"> {{\"Reset\" | translate}}</button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n  \r\n  \r\n            </div>\r\n  \r\n  \r\n          </div>\r\n          <!-- Search Panel -->\r\n  \r\n          <div *ngIf=\"getwayList?.length > 0; else norecord\">\r\n  \r\n            <div class=\"d-flex justify-content-between mb-3\">\r\n              <div>\r\n                <ul class=\"legends\">\r\n                  <li>\r\n                    <span class=\"bg-success\"></span>{{\"Publish\" | translate}}\r\n                  </li>\r\n                  <li>\r\n                    <span class=\"bg-danger\"></span> {{\"Unpublish\" | translate}}\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <div>\r\n  \r\n                <!-- {{\"Per Page\"}}:\r\n                <select (change)=\"onTableSizeChange($event)\">\r\n                  <option *ngFor=\"let size of pageSizes\" [ngValue]=\"size\">\r\n                    {{ size }}\r\n                  </option>\r\n                </select> -->\r\n  \r\n              </div>\r\n  \r\n            </div>\r\n  \r\n            <div class=\"table-responsive \" id=\"print-section\">\r\n                \r\n              <table data-toggle=\"table\" class=\"table table-bordered \">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\" class=\"noPrint\" style=\"width:25px\" valign=\"top\">\r\n                      <div class=\"form-check\">\r\n                        <input class=\"form-check-input checkall\" type=\"checkbox\" (change)=\"selectAll($event)\" id=\"checkall\"\r\n                          name=\"checkall\" value=\"checkall\">\r\n  \r\n                      </div>\r\n                    </th>\r\n                    <th scope=\"col\" style=\"width:50px\">{{\"Sl No.\" | translate}}</th>\r\n                    <th scope=\"col\">{{\"Type\" | translate}}</th>\r\n                    <th scope=\"col\">{{\"Name\" | translate}}</th>\r\n  \r\n                    <th scope=\"col\">{{\"URL\" | translate}}</th>\r\n                    <th scope=\"col\" class=\"noPrint\" style=\"width:140px\">{{\"Action\" | translate}}</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr *ngFor=\"let getways of getwayList| paginate\r\n                                                                      : {\r\n                                                                          itemsPerPage: tableSize,\r\n                                                                          currentPage: page,\r\n                                                                          totalItems: count\r\n                                                                        };\r\n                                                                  let i = index\">\r\n                    <td class=\"noPrint border-left-2\"\r\n                      [ngClass]=\"{'border-left-danger': getways.tinStatus == 0 , 'border-left-success': getways.tinStatus == 1 }\">\r\n                      <div class=\"form-check\">\r\n                        <input class=\"form-check-input rowCheck\" type=\"checkbox\"\r\n                          (change)=\"onChange(getways.intId, $event,getways.tinStatus)\"\r\n                          [attr.pubstatus]=\"getways.tinStatus\" name=\"{{getways.intId }}\" [id]=\"getways.intId\"\r\n                          [value]=\"getways.intId\">\r\n  \r\n                      </div>\r\n                    </td>\r\n                    <td>{{i+1+indexNumber}}</td>\r\n                    <td>{{getways.typeName}} </td>\r\n                    <td>{{getways.vchName}}</td>\r\n  \r\n                    <td>{{getways.vchUrl}}</td>\r\n                    <td class=\"noPrint\">\r\n                      <a class=\"text-info\"  (click)=\"filedata(getways.intId,getways.tinType,getways.typeName)\" >{{\"View\" | translate}}</a>\r\n                     \r\n              \r\n  \r\n                    </td>\r\n                  </tr>\r\n  \r\n  \r\n  \r\n  \r\n                </tbody>\r\n              </table>\r\n            </div>\r\n  \r\n\r\n            <!-- <lib-pagination [page]=\"page\" [count]=\"count\" [tableSize]=\"tableSize\" (callfunction)=\"onTableDataChange($event)\"></lib-pagination> -->\r\n            <lib-libpagination [page]=\"page\" [count]=\"count\" [tableSize]=\"tableSize\" (callfunction)=\"onTableDataChange($event)\"></lib-libpagination>\r\n            \r\n          </div>\r\n          <ng-template #norecord>\r\n            <h6 class=\"no-content\"> {{\"No Record Found\" | translate}}</h6>\r\n  \r\n          </ng-template>\r\n  \r\n  \r\n        </div>\r\n  \r\n      </div>\r\n  \r\n    </div>\r\n  \r\n  \r\n  \r\n  </div>\r\n  <ng-template #previewModal id=\"previewModal\" let-modal>\r\n    <div class=\"modal-header\">\r\n      <h5 class=\"modal-title mb-0\" id=\"movetoFolderModalLabel\">\r\n        {{\"Gateway Details\" | translate}}\r\n      </h5>\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn-close\"\r\n        (click)=\"closeModal()\"\r\n        aria-label=\"Close\"\r\n      ></button>\r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"modal-body\">\r\n        <div *ngFor=\"let getways of getwayDetails\">\r\n            <div class=\"mb-3 row\">\r\n                <label class=\"col-sm-4 \">{{\"Type\" | translate}}</label>\r\n                <div class=\"col-sm-8\">\r\n                  : <label class=\"text-dark\">{{typeName}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3 row\">\r\n                <label class=\"col-sm-4 \">{{\"Name\" | translate}}</label>\r\n                <div class=\"col-sm-8\">\r\n                  : <label class=\"text-dark\">{{getways.vchName}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3 row\">\r\n                <label class=\"col-sm-4 \">{{\"Url\" | translate}}</label>\r\n                <div class=\"col-sm-8\">\r\n                  : <label class=\"text-dark\">{{getways.url}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3 row\">\r\n                <label class=\"col-sm-4 \">{{\"Data post method\" | translate}}</label>\r\n                <div class=\"col-sm-8\">\r\n                  : <label class=\"text-dark\">{{getways.dataPostMethod}} </label>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3 row\">\r\n                <label class=\"col-sm-4 \">{{\"Contact Address\" | translate}}</label>\r\n                <div class=\"col-sm-8\">\r\n                  : <label class=\"text-dark\">{{getways.contactaddress}}</label>\r\n                </div>\r\n              </div>\r\n        </div>\r\n       \r\n       \r\n        <table class=\"table table-bordered mt-3\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">{{\"Label\" | translate}}</th>\r\n                <th scope=\"col\">{{\"Key\" | translate}}</th>\r\n                <th scope=\"col\">{{\"Value\" | translate}}</th>\r\n\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n\r\n              <tr *ngFor=\"let apilist of getDetailslist; let i = index\">\r\n                <td>{{apilist.vchLabel}}</td>\r\n                <td>{{apilist.vchKey}}</td>\r\n                <td>{{apilist.vchValue}}</td>\r\n              </tr>\r\n\r\n            </tbody>\r\n          </table>\r\n    </div>\r\n  </ng-template>" }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.HttpClient }, { type: i3.MsgengineLibService }, { type: i4.VarlistService }, { type: i5.NgbModal }, { type: i6.EncrypyDecrpyService }]; }, propDecorators: { previewModal: [{
                type: ViewChild,
                args: ['previewModal']
            }] } });
//# sourceMappingURL=data:application/json;base64,