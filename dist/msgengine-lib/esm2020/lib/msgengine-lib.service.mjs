import { Injectable } from '@angular/core';
import * as CryptoJS from 'crypto-js';
import { Buffer } from 'buffer';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/common/http";
import * as i3 from "./varlist.service";
export class MsgengineLibService {
    constructor(router, http, varlist) {
        this.router = router;
        this.http = http;
        this.varlist = varlist;
    }
    directlogoutlib() {
        sessionStorage.removeItem('ADMIN_SESSION');
        sessionStorage.removeItem('TOKEN');
        this.router.navigateByUrl('/login');
    }
    getGetwayName(formParams) {
        let requestParam = Buffer.from(JSON.stringify(formParams), 'utf8').toString('base64');
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        let reqData = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceURL = this.varlist.serviceURL + '/getwayConfiguration';
        let desnResponse = this.http.post(serviceURL, reqData);
        return desnResponse;
    }
    viewGatwayTypes(formParams) {
        let requestParam = Buffer.from(JSON.stringify(formParams), 'utf8').toString('base64');
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        let reqData = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceURL = this.varlist.serviceURL + '/getwayType';
        let desnResponse = this.http.post(serviceURL, reqData);
        return desnResponse;
    }
    newGetwayConfig(docParams) {
        let requestParam = btoa(JSON.stringify(docParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        let reqData = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceUrl = this.varlist.serviceURL + '/insertGatewayConfiguration';
        let serviceRes = this.http.post(serviceUrl, reqData);
        return serviceRes;
    }
    viewGetwayConfig(docParams) {
        let requestParam = btoa(JSON.stringify(docParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        let reqData = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceUrl = this.varlist.serviceURL + '/viewConfiguration';
        let serviceRes = this.http.post(serviceUrl, reqData);
        return serviceRes;
    }
    getPrevDetails(docParams) {
        let requestParam = btoa(JSON.stringify(docParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        let reqData = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceUrl = this.varlist.serviceURL + '/fillAll';
        let serviceRes = this.http.post(serviceUrl, reqData);
        return serviceRes;
    }
    deleteGetwayConfig(docParams) {
        let requestParam = btoa(JSON.stringify(docParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        let reqData = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceUrl = this.varlist.serviceURL + '/deletegetwayDocument';
        let serviceRes = this.http.post(serviceUrl, reqData);
        return serviceRes;
    }
    deleteAll(formParams, fname) {
        let requestParam = btoa(JSON.stringify(formParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        let reqData = {
            REQUEST_DATA: requestParam,
            REQUEST_TOKEN: requestToken
        };
        let serviceUrl = this.varlist.serviceURL + fname;
        let serviceRes = this.http.post(serviceUrl, reqData);
        return serviceRes;
    }
    publishAll(formParams, fname) {
        let requestParam = btoa(JSON.stringify(formParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        let reqData = {
            REQUEST_DATA: requestParam,
            REQUEST_TOKEN: requestToken
        };
        let serviceUrl = this.varlist.serviceURL + fname;
        let serviceRes = this.http.post(serviceUrl, reqData);
        return serviceRes;
    }
    unpublishAll(formParams, fname) {
        let requestParam = btoa(JSON.stringify(formParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        let reqData = {
            REQUEST_DATA: requestParam,
            REQUEST_TOKEN: requestToken
        };
        let serviceUrl = this.varlist.serviceURL + fname;
        let serviceRes = this.http.post(serviceUrl, reqData);
        return serviceRes;
    }
    newMessage(messageParams) {
        let requestParam = btoa(JSON.stringify(messageParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        let reqData = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceUrl = this.varlist.serviceURL + '/addMessageConfig';
        let serviceRes = this.http.post(serviceUrl, reqData);
        return serviceRes;
    }
    // newMessage(messageParams: any): Observable<any> {
    //   let serviceUrl = this.varlist.serviceURL + 'addMessageConfig';
    //   let serviceRes = this.http.post(serviceUrl, messageParams);
    //   return serviceRes;
    // }
    viewMessage(messageParams) {
        let requestParam = btoa(JSON.stringify(messageParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        messageParams = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceUrl = this.varlist.serviceURL + '/viewMessageConfig';
        let serviceRes = this.http.post(serviceUrl, messageParams);
        return serviceRes;
    }
    reminderSchedular(messageParams) {
        let requestParam = btoa(JSON.stringify(messageParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        messageParams = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceUrl = this.varlist.serviceURL + '/getRemindercron';
        let serviceRes = this.http.post(serviceUrl, messageParams);
        return serviceRes;
    }
    msgexecuteSchedular(messageParams) {
        let requestParam = btoa(JSON.stringify(messageParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        messageParams = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceUrl = this.varlist.serviceURL + '/startExecution';
        let serviceRes = this.http.post(serviceUrl, messageParams);
        return serviceRes;
    }
    msgstopSchedular(messageParams) {
        let requestParam = btoa(JSON.stringify(messageParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        messageParams = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceUrl = this.varlist.serviceURL + '/stopExecution';
        let serviceRes = this.http.post(serviceUrl, messageParams);
        return serviceRes;
    }
    getStaticConfigurationKeys(messageParams) {
        let requestParam = btoa(JSON.stringify(messageParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        messageParams = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceUrl = this.varlist.serviceURL + '/GetStaticKeys';
        let serviceRes = this.http.post(serviceUrl, messageParams);
        return serviceRes;
    }
    getFetchPublishRecord(messageParams) {
        let requestParam = btoa(JSON.stringify(messageParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        messageParams = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceUrl = this.varlist.serviceURL + '/FetchPublishRecord';
        let serviceRes = this.http.post(serviceUrl, messageParams);
        return serviceRes;
    }
    getLanguage(messageParams) {
        let requestParam = btoa(JSON.stringify(messageParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        messageParams = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceUrl = this.varlist.serviceURL + '/viewLanguage';
        let serviceRes = this.http.post(serviceUrl, messageParams);
        return serviceRes;
    }
    getForms(messageParams) {
        let requestParam = btoa(JSON.stringify(messageParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        messageParams = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceUrl = this.varlist.serviceURL + '/getFormName';
        let serviceRes = this.http.post(serviceUrl, messageParams);
        return serviceRes;
    }
    getConfigurationKeys(messageParams) {
        let requestParam = btoa(JSON.stringify(messageParams));
        let requestToken = CryptoJS.HmacSHA256(requestParam, this.varlist.apiHashingKey).toString();
        messageParams = { 'REQUEST_DATA': requestParam, 'REQUEST_TOKEN': requestToken };
        let serviceUrl = this.varlist.serviceURL + '/getConfigKeys';
        let serviceRes = this.http.post(serviceUrl, messageParams);
        return serviceRes;
    }
    msguploadFile(formParams) {
        let serviceURL = this.varlist.serviceURL + '/fileUpload';
        let moduleResponse = this.http.post(serviceURL, formParams);
        return moduleResponse;
    }
    langReplace(languageText, languageName = "") {
        if (languageText != "" && languageText != undefined) {
            let lngToLower = languageText.toLowerCase();
            let allLangListResult = sessionStorage.getItem("ALL_LANG_LIST");
            let SeetionParsedLangRes = JSON.parse(CryptoJS.AES.decrypt(allLangListResult, this.varlist.apiHashingKey).toString(CryptoJS.enc.Utf8));
            let sessionUserLangtoken = sessionStorage.getItem("USER_LANGPREF");
            let sessionUserLang = JSON.parse(CryptoJS.AES.decrypt(sessionUserLangtoken, this.varlist.apiHashingKey).toString(CryptoJS.enc.Utf8));
            if (SeetionParsedLangRes[lngToLower] != undefined) {
                let allParsedLang = JSON.parse(SeetionParsedLangRes[lngToLower]);
                return allParsedLang[sessionUserLang] != "" && allParsedLang[sessionUserLang] != undefined
                    ? allParsedLang[sessionUserLang]
                    : languageText;
            }
            else {
                return languageText;
            }
        }
        else {
            return languageText;
        }
    }
}
MsgengineLibService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: MsgengineLibService, deps: [{ token: i1.Router }, { token: i2.HttpClient }, { token: i3.VarlistService }], target: i0.ɵɵFactoryTarget.Injectable });
MsgengineLibService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: MsgengineLibService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: MsgengineLibService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.HttpClient }, { type: i3.VarlistService }]; } });
//# sourceMappingURL=data:application/json;base64,